{"version":3,"file":"particlesystem.js","mappings":"mBAAO,MAAMA,EACTC,kBACAA,mBACAA,mBACAA,sBACAA,mBAEG,SAASC,EAAsBC,EAAWC,GAC7C,MAAMC,EAAQF,EAAUG,EAClBC,EAAQJ,EAAUK,EAClBC,EAAQN,EAAUO,EACxB,IAAIC,GAAOC,KAAKC,MAAMJ,EAAOJ,GAASO,KAAKE,GAAK,EAC5CC,EAAMH,KAAKI,KAAKX,EAAQA,EAAQI,EAAQA,IAIzC,SAAmCE,EAAKM,EAAOC,EAAMd,GAExD,IAAIe,EAAkB,GAAPD,EACXE,EAAoB,GAARH,EACZI,EAAgB,GAANV,EACVW,EAAUV,KAAKW,IAAIJ,GACnBK,EAAUZ,KAAKa,IAAIN,GACnBO,EAAWd,KAAKW,IAAIH,GACpBO,EAAWf,KAAKa,IAAIL,GACpBQ,EAAShB,KAAKW,IAAIF,GAClBQ,EAASjB,KAAKa,IAAIJ,GACtBjB,EAAOE,EAAKuB,EAASH,EAAWF,EAAYI,EAASD,EAAWL,EAChElB,EAAOI,EAAKoB,EAASD,EAAWH,EAAYK,EAASH,EAAWJ,EAChElB,EAAOM,EAAKmB,EAASF,EAAWL,EAAYM,EAASF,EAAWF,EAChEpB,EAAO0B,EAAKD,EAASF,EAAWH,EAAYI,EAASF,EAAWJ,EAhBhES,CAA0BpB,GADbC,KAAKC,MAAMN,EAAOQ,GACO,EAAGX,GCdtC,IAAI4B,EAWAC,EAUAC,GApBX,SAAWF,GACPA,EAAkBA,EAAuB,IAAI,GAAK,MAClDA,EAAkBA,EAAwB,KAAI,GAAK,OACnDA,EAAkBA,EAA8B,WAAI,GAAK,aACzDA,EAAkBA,EAA0B,OAAI,GAAK,SACrDA,EAAkBA,EAAyB,MAAI,GAAK,QACpDA,EAAkBA,EAAwB,KAAI,GAAK,OACnDA,EAAkBA,EAA0B,OAAI,GAAK,SACrDA,EAAkBA,EAA6B,UAAI,GAAK,YAR5D,CASGA,IAAsBA,EAAoB,KAE7C,SAAWC,GACPA,EAASA,EAAiB,OAAI,GAAK,SACnCA,EAASA,EAAe,KAAI,GAAK,OACjCA,EAASA,EAAmB,SAAI,GAAK,WACrCA,EAASA,EAAuB,aAAI,GAAK,eAJ7C,CAKGA,IAAaA,EAAW,KAK3B,SAAWC,GACPA,EAA2BA,EAAkC,MAAI,GAAK,QAD1E,CAEGA,IAA+BA,EAA6B,KCtBxD,MAAMC,EACTlC,gBACI,MAAO,CACHmC,KAAMJ,EAAkBG,IACxBE,OAAQ,EACRC,MAAO,EACPC,gBAAiB,EACjBC,WAAY,EACZC,OAAQ,EACRC,YAAa,EACbC,QAASV,EAASW,OAClBC,SAAU,EACVC,UAAW,EACXC,SAAU,EACVC,MAAO,CAAC,EAAG,EAAG,GACdC,cAAef,EAA2BgB,MAC1CC,wBAAwB,EACxBC,oBAAqB,GAG7BnD,wBAAwBoD,EAAQC,EAAaC,EAAiBC,EAAeC,GAErEA,EACAF,EAAgBG,eAAe,EAAG,EAAG,GAGrC1D,EAAS2D,YAAYC,+BAA+B,EAAG,EAAG,EAAGN,EAAaC,GAGlFtD,6BAA6BoD,EAAQC,EAAaO,EAAgBC,EAAcC,EAAkBC,EAAeC,EAAeR,GAC5H,IAAIS,EAAQlE,EAASmE,WAAWC,aAAaf,EAAOd,gBAAiBc,EAAOd,iBACxE8B,EAAQrE,EAASmE,WAAWC,aAAaf,EAAOd,gBAAiBc,EAAOd,iBACxE+B,EAAQtE,EAASmE,WAAWC,aAAaf,EAAOd,gBAAiBc,EAAOd,iBAC5E2B,GAASA,EAAQ,EAAI,GAAK,GAAKA,EAC/BG,GAASA,EAAQ,EAAI,GAAK,GAAKA,EAC/BC,GAASA,EAAQ,EAAI,GAAK,GAAKA,EAC/B,IAAIC,GAAMlB,EAAOL,MAAM,IAAM,GAAK,EAC9BwB,GAAMnB,EAAOL,MAAM,IAAM,GAAK,EAC9ByB,GAAMpB,EAAOL,MAAM,IAAM,GAAK,EAC9BS,EACAI,EAAeH,eAAeQ,EAAQK,EAAIF,EAAQG,EAAIF,EAAQG,GAG9DzE,EAAS2D,YAAYe,oCAAoCR,EAAQK,EAAIF,EAAQG,EAAIF,EAAQG,EAAInB,EAAaO,IC5C/G,IAAIc,EAAc,KAClB,SAASC,EAAeC,EAAeC,EAAmBC,EAAgBC,EAAgBC,EAAiBC,EAAWC,EAAYC,EAAWC,GAChJ,IAAIC,EAEJ,OADAR,GAAwCM,EAChCC,GACJ,KAAMpD,EAAa,KAEfqD,GADeT,EAAgBC,GAAqBG,EACtCC,EACVP,EAAcQ,IACdA,GAA0BD,EAC1BI,EAAI1E,KAAK2E,MAAMD,EAAIH,GAAcA,GAErC,MAEJ,KAAMlD,EAAiB,SAAG,CACtB,IAAIuD,GAAWX,EAAgBC,GAAqBG,EAChDQ,EAAa7E,KAAK8E,MAAMF,EAAUN,GACtCI,EAAIE,EAAUN,EACVP,EAAcQ,IACdA,GAA0BD,EAC1BI,EAAI1E,KAAK2E,MAAMD,EAAIH,GAAcA,GAEjCM,EAAa,GAAK,IAClBH,EAAIJ,GAER,MAEJ,KAAMjD,EAAqB,aACvB6C,EAAoBC,EAAiBC,EACjCL,EAAcQ,IACdA,GAA0BD,EAC1BJ,EAAoBlE,KAAK2E,MAAMT,EAAoBK,GAAcA,GAErEG,EAAIJ,EAAYJ,EAChB,MAEJ,QACIQ,EAAI1E,KAAK+E,SAAWT,EAI5B,OAAOI,ECvCJ,MAAMM,EACT3F,gBACI,MAAO,CACHmC,KAAMJ,EAAkB4D,OACxBvD,OAAQ,EACRC,MAAO,EACPC,gBAAiB,EACjBC,WAAY,EACZC,OAAQ,EACRC,YAAa,EACbC,QAASV,EAASW,OAClBC,SAAoB,EAAVjC,KAAKE,GACfgC,UAAW,EACXC,SAAU,EACVC,MAAO,CAAC,EAAG,EAAG,GACdC,cAAef,EAA2BgB,MAC1CC,wBAAwB,EACxBC,oBAAqB,GAG7BnD,wBAAwBoD,EAAQC,EAAaC,EAAiBC,EAAeC,GAEzEF,EAAgBsC,SAASrC,GAAesC,YACpCrC,GAKAzD,EAAS2D,YAAYC,+BAA+BL,EAAgBjD,EAAGiD,EAAgB/C,EAAG+C,EAAgB7C,EAAG4C,EAAaC,GAUlItD,6BAA6BoD,EAAQC,EAAaO,EAAgBC,EAAcC,EAAkBC,EAAeC,EAAeR,GAC5H,IAAI6B,EAAIV,EAAed,EAAcC,EAAkBC,EAAeC,EAAyB,EAAVrD,KAAKE,GAAQuC,EAAOR,SAAUQ,EAAOP,UAAWO,EAAON,SAAUM,EAAOV,SAC7J,IAAIoD,EAAa1C,EAAOhB,OAASrC,EAASmE,WAAWC,YAAY,EAAGf,EAAOhB,OAASgB,EAAOd,iBACvF2B,EAAQ6B,EAAanF,KAAKa,IAAI6D,GAC9BjB,EAAQ0B,EAAanF,KAAKW,IAAI+D,GAE9B7B,GACAI,EAAevD,EAAI4D,EACnBL,EAAerD,EAAI6D,EACnBR,EAAenD,EAJP,GAORV,EAAS2D,YAAYe,oCAAoCR,EAAOG,EAPxD,EAOsEf,EAAaO,IClDhG,MAAMmC,EACT/F,gBACI,MAAO,CACHmC,KAAMJ,EAAkBgE,KACxB3D,OAAQ,EACRC,MAAO1B,KAAKE,GACZyB,gBAAiB,EACjBC,WAAY,EACZC,OAAQ,EACRC,YAAa,EACbC,QAASV,EAASW,OAClBC,SAAoB,EAAVjC,KAAKE,GACfgC,UAAW,EACXC,SAAU,EACVC,MAAO,CAAC,EAAG,EAAG,GACdC,cAAef,EAA2BgB,MAC1CC,wBAAwB,EACxBC,oBAAqB,GAG7BnD,aAAe,UACfA,wBAAwBoD,EAAQC,EAAaC,EAAiBC,EAAeC,GAEzEF,EAAgBsC,SAASrC,GAAeyC,qBAAqB,EAAG,EAAG5C,EAAOb,YAAYsD,YAClFrC,GAOAzD,EAAS2D,YAAYC,+BAA+BL,EAAgBjD,EAAGiD,EAAgB/C,EAAG+C,EAAgB7C,EAAG4C,EAAaC,GAQ9HA,EAAgBjD,EAAIiD,EAAgBjD,EAHxB,EAIZiD,EAAgB/C,EAAI+C,EAAgB/C,EAHxB,EAIZ+C,EAAgB7C,EAAI6C,EAAgB7C,EAHxB,EAIZ6C,EAAgBuC,YAEpB7F,6BAA6BoD,EAAQC,EAAaO,EAAgBC,EAAcC,EAAkBC,EAAeC,EAAeR,GAC5H,IAAI6B,EAAIV,EAAed,EAAcC,EAAkBC,EAAeC,EAAyB,EAAVrD,KAAKE,GAAQuC,EAAOR,SAAUQ,EAAOP,UAAWO,EAAON,SAAUM,EAAOV,SAC7J,IAAIuD,EACiB,IAAjB7C,EAAOf,MACPe,EAAOb,WAAaa,EAAOhB,OAASzB,KAAKuF,IAAI9C,EAAOf,MAAQ,GAG5De,EAAOb,WAAawD,EAAKI,MAMzBF,EAJC7C,EAAOF,uBAIJ,EAHAnD,EAASmE,WAAWC,YAAY,EAAGf,EAAOX,aAKlDwD,EAAItF,KAAKyF,IAAI,KAASH,GACtB,IAAI7D,EAASgB,EAAOhB,OAASrC,EAASmE,WAAWC,YAAY,EAAGf,EAAOhB,OAASgB,EAAOd,iBACnFc,EAAOb,WAAa,IACpBH,EAASA,GAAU6D,EAAI7C,EAAOZ,OAASY,EAAOb,YAAca,EAAOb,YAEvE,IAAI0B,EAAQ,EACRI,EAAQ,EACRD,EAAQ,EACRhB,EAAOJ,eAAiBf,EAA2BgB,OACnDgB,EAAQ7B,EAASzB,KAAKW,IAAI+D,GAC1BjB,EAAQhC,EAASzB,KAAKa,IAAI6D,GAC1BhB,EAAQ4B,EAAI7C,EAAOZ,SAGnByB,EAAQ7B,EAASzB,KAAKW,IAAI+D,GAC1BhB,EAAQjC,EAASzB,KAAKa,IAAI6D,GAC1BjB,EAAQ6B,EAAI7C,EAAOZ,QAEnBgB,GACAI,EAAevD,EAAI4D,EACnBL,EAAerD,EAAI6D,EACnBR,EAAenD,EAAI4D,GAGnBtE,EAAS2D,YAAYe,oCAAoCR,EAAOG,EAAOC,EAAOhB,EAAaO,ICnFhG,MAAMyC,EACTrG,gBACI,MAAO,CACHmC,KAAMJ,EAAkBsE,KACxBjE,OAAQ,EACRC,MAAO1B,KAAKE,GACZyB,gBAAiB,EACjBC,WAAY,EACZC,OAAQ,EACRC,YAAa,EACbC,QAASV,EAASW,OAClBC,SAAU,EACVC,UAAW,EACXC,SAAU,EACVC,MAAO,CAAC,EAAG,EAAG,GACdC,cAAef,EAA2BgB,MAC1CC,wBAAwB,EACxBC,oBAAqB,GAG7BnD,wBAAwBoD,EAAQC,EAAaC,EAAiBC,EAAeC,GAEzEF,EAAgBG,eAAe,EAAG,EAAG,GAQjCD,GAIAzD,EAAS2D,YAAYC,+BAA+BL,EAAgBjD,EAAGiD,EAAgB/C,EAAG+C,EAAgB7C,EAAG4C,EAAaC,GAGlItD,6BAA6BoD,EAAQC,EAAaO,EAAgBC,EAAcC,EAAkBC,EAAeC,EAAeR,GAC5H,IAAI6B,EAAIV,EAAed,EAAcC,EAAkBC,EAAeC,EAAe,EAAKZ,EAAOR,SAAUQ,EAAOP,UAAWO,EAAON,SAAUM,EAAOV,SACrJ,IAAIuB,EAAQb,EAAOhB,QAAUiD,EAAIjC,EAAOR,SAAW,EAAI,GACvDgB,EAAeH,eAAeQ,EAAO,EAAG,GACpCT,GAIAzD,EAAS2D,YAAYe,oCAAoCb,EAAevD,EAAGuD,EAAerD,EAAGqD,EAAenD,EAAG4C,EAAaO,IC7CjI,MAAM0C,EACTtG,gBACI,MAAO,CACHmC,KAAMJ,EAAkBuE,WACxBlE,OAAQ,EACRC,MAAO1B,KAAKE,GACZyB,gBAAiB,EACjBC,WAAY,EACZC,OAAQ,EACRC,YAAa,EACbC,QAASV,EAASW,OAClBC,SAAoB,EAAVjC,KAAKE,GACfgC,UAAW,EACXC,SAAU,EACVC,MAAO,CAAC,EAAG,EAAG,GACdC,cAAef,EAA2BgB,MAC1CC,wBAAwB,EACxBC,oBAAqB,GAG7BnD,wBAAwBoD,EAAQC,EAAaC,EAAiBC,EAAeC,GAEzEF,EAAgBsC,SAASrC,GAAesC,YACpCrC,GAKAzD,EAAS2D,YAAYC,+BAA+BL,EAAgBjD,EAAGiD,EAAgB/C,EAAG+C,EAAgB7C,EAAG4C,EAAaC,GAE9H,IAAIW,EAAQlE,EAASmE,WAAWC,YAAY,EAAGf,EAAOD,qBAAuB,GACzEiB,EAAQrE,EAASmE,WAAWC,YAAY,EAAGf,EAAOD,qBAAuB,GACzEkB,EAAQtE,EAASmE,WAAWC,YAAY,EAAGf,EAAOD,qBAAuB,GAC7EG,EAAgBjD,GAAK4D,EACrBX,EAAgB/C,GAAK6D,EACrBd,EAAgB7C,GAAK4D,EACrBf,EAAgBuC,YAQpB7F,6BAA6BoD,EAAQC,EAAaO,EAAgBC,EAAcC,EAAkBC,EAAeC,EAAeR,GAC5H,IAAI6B,EAAIV,EAAed,EAAcC,EAAkBC,EAAeC,EAAyB,EAAVrD,KAAKE,GAAQuC,EAAOR,SAAUQ,EAAOP,UAAWO,EAAON,SAAUM,EAAOV,SAC7J,IAAI6D,EAAQxG,EAASmE,WAAWC,YAAY,EAAGf,EAAOd,iBAClDwD,EAAa1C,EAAOhB,OAASgB,EAAOhB,OAASmE,EAAQA,EACrDC,EAAIzG,EAASmE,WAAWC,YAAY,EAAG,GACvCsC,EAAMpB,EACNqB,EAAQ/F,KAAKgG,KAAK,EAAIH,EAAI,GAC1BvC,EAAQ6B,EAAanF,KAAKa,IAAIiF,GAAO9F,KAAKW,IAAIoF,GAC9CrC,EAAQ1D,KAAKiG,IAAId,EAAaU,GAC9BpC,EAAQ0B,EAAanF,KAAKW,IAAImF,GAAO9F,KAAKW,IAAIoF,GAC9ClD,EACAI,EAAeH,eAAeQ,EAAOG,EAAOC,GAG5CtE,EAAS2D,YAAYe,oCAAoCR,EAAOG,EAAOC,EAAOhB,EAAaO,IC3DhG,MAAMiD,EACT7G,gBACI,MAAO,CACHmC,KAAMJ,EAAkB8E,MACxBzE,OAAQ,EACRC,MAAO1B,KAAKE,GACZyB,gBAAiB,EACjBC,WAAY,EACZC,OAAQ,EACRC,YAAa,EACbC,QAASV,EAASW,OAClBC,SAAoB,EAAVjC,KAAKE,GACfgC,UAAW,EACXC,SAAU,EACVC,MAAO,CAAC,EAAG,EAAG,GACdC,cAAef,EAA2BgB,MAC1CC,wBAAwB,EACxBC,oBAAqB,GAG7BnD,wBAAwBoD,EAAQC,EAAaC,EAAiBC,EAAeC,GAErEA,EACAF,EAAgBG,eAAe,EAAG,EAAG,GAGrC1D,EAAS2D,YAAYC,+BAA+B,EAAG,EAAG,EAAGN,EAAaC,GAGlFtD,6BAA6BoD,EAAQC,EAAaO,EAAgBC,EAAcC,EAAkBC,EAAeC,EAAeR,GACxHA,EACAI,EAAeH,eAAe,EAAG,EAAG,GAGpCJ,EAAYyD,oBAAoBlD,IClCrC,MAAMmD,EACT/G,gBACI,MAAO,CACHmC,KAAMJ,EAAkBgF,UACxB3E,OAAQ,EACRC,MAAO1B,KAAKE,GACZyB,gBAAiB,EACjBC,WAAY,EACZC,OAAQ,EACRC,YAAa,EACbC,QAASV,EAASW,OAClBC,SAAoB,EAAVjC,KAAKE,GACfgC,UAAW,EACXC,SAAU,EACVC,MAAO,CAAC,EAAG,EAAG,GACdC,cAAef,EAA2BgB,MAC1CC,wBAAwB,EACxBC,oBAAqB,GAG7BnD,wBAAwBoD,EAAQC,EAAaC,EAAiBC,EAAeC,GAErEA,EACAF,EAAgBG,eAAe,EAAG,EAAG,GAGrC1D,EAAS2D,YAAYC,+BAA+B,EAAG,EAAG,EAAGN,EAAaC,GAGlFtD,6BAA6BoD,EAAQC,EAAaO,EAAgBC,EAAcC,EAAkBC,EAAeC,EAAeR,GAC5H,IAAIS,EAAQlE,EAASmE,WAAWC,aAAa,GAAK,IAC9CC,EAAQrE,EAASmE,WAAWC,aAAa,GAAK,IAE9CX,EACAI,EAAeH,eAAeQ,EAAQb,EAAOL,MAAM,GAAIqB,EAAQhB,EAAOL,MAAM,GAFpE,EAEgFK,EAAOL,MAAM,IAGrGhD,EAAS2D,YAAYe,oCAAoCR,EAAQb,EAAOL,MAAM,GAAIqB,EAAQhB,EAAOL,MAAM,GAL/F,EAK2GK,EAAOL,MAAM,GAAIM,EAAaO,ICrCtJ,MAAMoD,EACThH,gBACI,MAAO,CACHmC,KAAMJ,EAAkBiF,OACxB5E,OAAQ,EACRC,MAAO1B,KAAKE,GACZyB,gBAAiB,EACjBC,WAAY,EACZC,OAAQ,EACRC,YAAa,EACbC,QAASV,EAASW,OAClBC,SAAoB,EAAVjC,KAAKE,GACfgC,UAAW,EACXC,SAAU,EACVC,MAAO,CAAC,EAAG,EAAG,GACdC,cAAef,EAA2BgB,MAC1CC,wBAAwB,EACxBC,oBAAqB,GAG7BnD,wBAAwBoD,EAAQC,EAAaC,EAAiBC,EAAeC,GAEzEF,EAAgBsC,SAASrC,GAAesC,YACpCrC,GAIAzD,EAAS2D,YAAYC,+BAA+BL,EAAgBjD,EAAGiD,EAAgB/C,EAAG+C,EAAgB7C,EAAG4C,EAAaC,GAGlItD,6BAA6BoD,EAAQC,EAAaO,EAAgBC,EAAcC,EAAkBC,EAAeC,EAAeR,GAC5H,IAAIS,EAAQlE,EAASmE,WAAWC,aAAa,GAAK,IAC9CC,EAAQrE,EAASmE,WAAWC,aAAa,GAAK,IAE9CX,EACAI,EAAeH,eAAeQ,EAAQb,EAAOL,MAAM,GAAIqB,EAAQhB,EAAOL,MAAM,GAFpE,EAEgFK,EAAOL,MAAM,IAGrGhD,EAAS2D,YAAYe,oCAAoCR,EAAQb,EAAOL,MAAM,GAAIqB,EAAQhB,EAAOL,MAAM,GAL/F,EAK2GK,EAAOL,MAAM,GAAIM,EAAaO,IC/BtJ,MAAMqD,EAITjH,8BAA8BoD,EAAQC,EAAa6D,EAAmB3D,EAAeC,GACjF,OAAQJ,EAAOjB,MACX,KAAMJ,EAAqB,IACvBG,EAAIiF,iBAAiB/D,EAAQC,EAAa6D,EAAmB3D,EAAeC,GAC5E,MAEJ,KAAMzB,EAAsB,KACxBgE,EAAKoB,iBAAiB/D,EAAQC,EAAa6D,EAAmB3D,EAAeC,GAC7E,MAEJ,KAAMzB,EAA4B,WAC9BuE,EAAWa,iBAAiB/D,EAAQC,EAAa6D,EAAmB3D,EAAeC,GACnF,MAEJ,KAAMzB,EAAwB,OAC1BiF,EAAOG,iBAAiB/D,EAAQC,EAAa6D,EAAmB3D,EAAeC,GAC/E,MAEJ,KAAMzB,EAAsB,KACxBsE,EAAKc,iBAAiB/D,EAAQC,EAAa6D,EAAmB3D,EAAeC,GAC7E,MAEJ,KAAMzB,EAAwB,OAC1B4D,EAAOwB,iBAAiB/D,EAAQC,EAAa6D,EAAmB3D,EAAeC,GAC/E,MAEJ,KAAMzB,EAA2B,UAC7BgF,EAAUI,iBAAiB/D,EAAQC,EAAa6D,EAAmB3D,EAAeC,GAClF,MAEJ,QACIqD,EAAMM,iBAAiB/D,EAAQC,EAAa6D,EAAmB3D,EAAeC,IAgB1FxD,6BAA6BoD,EAAQC,EAAa+D,EAAkBvD,EAAcC,EAAkBC,EAAeC,EAAeR,GAC9H,OAAQJ,EAAOjB,MACX,KAAMJ,EAAqB,IACvBG,EAAImF,sBAAsBjE,EAAQC,EAAa+D,EAAkBvD,EAAcC,EAAkBC,EAAeC,EAAeR,GAC/H,MAEJ,KAAMzB,EAAsB,KACxBgE,EAAKsB,sBAAsBjE,EAAQC,EAAa+D,EAAkBvD,EAAcC,EAAkBC,EAAeC,EAAeR,GAChI,MAEJ,KAAMzB,EAA4B,WAC9BuE,EAAWe,sBAAsBjE,EAAQC,EAAa+D,EAAkBvD,EAAcC,EAAkBC,EAAeC,EAAeR,GACtI,MAEJ,KAAMzB,EAAwB,OAC1BiF,EAAOK,sBAAsBjE,EAAQC,EAAa+D,EAAkBvD,EAAcC,EAAkBC,EAAeC,EAAeR,GAClI,MAEJ,KAAMzB,EAAsB,KACxBsE,EAAKgB,sBAAsBjE,EAAQC,EAAa+D,EAAkBvD,EAAcC,EAAkBC,EAAeC,EAAeR,GAChI,MAEJ,KAAMzB,EAAwB,OAC1B4D,EAAO0B,sBAAsBjE,EAAQC,EAAa+D,EAAkBvD,EAAcC,EAAkBC,EAAeC,EAAeR,GAClI,MAEJ,KAAMzB,EAA2B,UAC7BgF,EAAUM,sBAAsBjE,EAAQC,EAAa+D,EAAkBvD,EAAcC,EAAkBC,EAAeC,EAAeR,GACrI,MAEJ,QACIqD,EAAMQ,sBAAsBjE,EAAQC,EAAa+D,EAAkBvD,EAAcC,EAAkBC,EAAeC,EAAeR,KCf1I,IAAI,EAsBA,EC/FA8D,EAQAC,EAMAC,GD4DX,SAAWC,GAIPA,EAAwBA,EAAkC,SA7D1B,GA6DsD,WAItFA,EAAwBA,EAAsC,aAhE1B,GAgE0D,eAI9FA,EAAwBA,EAA+B,MAnE1B,GAmEmD,QAIhFA,EAAwBA,EAAmC,UAtE1B,GAsEuD,YAhB5F,CAiBG,IAA4B,EAA0B,KAKzD,SAAWC,GAIPA,EAA0BA,EAAiC,MA5E9B,GA4EuD,QAIpFA,EAA0BA,EAAqC,UA/E9B,GA+E2D,YAI5FA,EAA0BA,EAAoC,SAlF9B,GAkF0D,WAI1FA,EAA0BA,EAAwC,aArF9B,GAqF8D,eAIlGA,EAA0BA,EAAkC,OAxF9B,IAwFwD,SApB1F,CAqBG,IAA8B,EAA4B,KCpH7D,SAAWJ,GACPA,EAAuBA,EAA8B,MAAI,GAAK,QAI9DA,EAAuBA,EAA8B,MAAI,GAAK,QALlE,CAMGA,IAA2BA,EAAyB,KAEvD,SAAWC,GACPA,EAAuBA,EAAkC,UAAI,GAAK,YAClEA,EAAuBA,EAA8B,MAAI,GAAK,QAC9DA,EAAuBA,EAA8B,MAAI,GAAK,QAHlE,CAIGA,IAA2BA,EAAyB,KAEvD,SAAWC,GACPA,EAAiBA,EAAuB,KAAI,GAAK,OACjDA,EAAiBA,EAAwB,MAAI,GAAK,QAIlDA,EAAiBA,EAAwB,MAAI,GAAK,QANtD,CAOGA,IAAqBA,EAAmB,KAIpC,MAAMG,EACT3H,qBACAA,qBACAA,wBACAA,oBACAA,aAAeW,KAAKI,KAAK,GACzBf,cACI2H,EAAmBC,cAAgB7H,EAAS2D,YAAYmE,OACxDF,EAAmBG,cAAgB/H,EAAS2D,YAAYmE,OACxDF,EAAmBI,iBAAmBhI,EAASiI,eAAeH,OAC9DF,EAAmBM,aAAelI,EAASmI,YAAYL,OACvDF,EAAmBQ,MAAQxH,KAAKI,KAAK,GAKzCqH,aAAe,IAIfC,SAAU,EAIVC,SAAU,EAIVC,SAAW,EACXC,WAAa,EAIbC,WAAa,EACbC,aAIAC,aAAe,IAIf9E,aAAe,EAIfC,iBAAmB,EAInB8E,aAAe,GAMfC,OAAS,GACTC,iBAAmB,GAMnBC,gBAAkBzB,EAAuB0B,MACzCC,aAAe1B,EAAuB2B,UACtCC,gBAAkB3B,EAAiBwB,MACnCI,2BACAC,wBACAC,uBACAC,2BACAC,wBACAC,qBAOAC,kCACAC,6BAA8B,EAC9BC,gCAAkC,EAClCC,uCACAC,+BACAC,mBAAoB,EACpBC,+BAOAC,8BASAC,kCAIAC,0BAKAC,SAAW,GACXC,WAAa,GAIbC,cAAgB,GAChBC,gBAAkB,GAClBC,kBAAoB,GACpBC,wBAA0B,GAC1BC,mBAAqB,GACrBC,eAAiB,GACjBC,gBAAkB,GAClBC,2BAA6B,GAC7BC,sBAAwB,GACxBC,kBAAoB,GACpBC,mBAAqB,GACrBC,kBAAoB,GACpBC,uBAAyB,GACzBC,mBAAqB,GACrBC,mBAAqB,GACrBC,oBAAsB,GACtBC,+BAAiC,GACjCC,cAAgB,GAChBC,gBAAkB,GAClBC,YAAc,GACdC,sBAAwB,GACxBC,mBAAqB,GACrBC,iBAAmB,GACnBC,aAAe,GACfC,yBAA0B,EAC1BC,4BAA6B,EAC7BC,iCAAkC,EAClCC,yBAA0B,EAC1BC,wBAAyB,EACzBC,4BAA6B,EAC7BC,mBAAqB,EACrBC,aAAetM,EAAS2D,YAAYmE,OACpCyE,aAAevM,EAASwM,YAAY1E,OACpC2E,UAAY,EACZC,WAAa,EACbC,gBAAkB,EAClBC,YAAa,EACbC,gBAAiB,EACjBC,qBAAuB9M,EAASmI,YAAY4E,SAC5CC,eAAiBhN,EAASmI,YAAY4E,SACtCE,eAAiBjN,EAASmI,YAAY4E,SACtCG,kBAAoBlN,EAAS2D,YAAYmE,KACzCqF,aAAc,EACdC,UACQC,KAAKF,cAGTE,KAAKC,OACLD,KAAKE,mBAAgBC,EACrBH,KAAKI,kBAAeD,EACpBH,KAAKhE,4BAA8BgE,KAAKhE,2BAA2B+D,UACnEC,KAAK/D,yBAA2B+D,KAAK/D,wBAAwB8D,UAC7DC,KAAK9D,wBAA0B8D,KAAK9D,uBAAuB6D,UAC3DC,KAAK7D,4BAA8B6D,KAAK7D,2BAA2B4D,UACnEC,KAAK5D,yBAA2B4D,KAAK5D,wBAAwB2D,UAC7DC,KAAK3D,sBAAwB2D,KAAK3D,qBAAqB0D,UACvDC,KAAK1D,mCAAqC0D,KAAK1D,kCAAkCyD,UACjFC,KAAKvD,wCAA0CuD,KAAKvD,uCAAuCsD,UAC3FC,KAAKtD,gCAAkCsD,KAAKtD,+BAA+BqD,UAC3EC,KAAKpD,gCAAkCoD,KAAKpD,+BAA+BmD,UAC3EC,KAAKnD,+BAAiCmD,KAAKnD,8BAA8BkD,UACzEC,KAAKlD,mCAAqCkD,KAAKlD,kCAAkCiD,UACjFC,KAAKvE,OAAO4E,OAAS,EACjBL,KAAK7B,cAAckC,OAAS,EAC5BL,KAAK5B,gBAAgBiC,OAAS,EAC9BL,KAAK3B,YAAYgC,OAAS,EAC1BL,KAAKhD,SAASqD,OAAS,EACvBL,KAAK/C,WAAWoD,OAAS,EACzBL,KAAK9C,cAAcmD,OAAS,EAC5BL,KAAK7C,gBAAgBkD,OAAS,EAC9BL,KAAK5C,kBAAkBiD,OAAS,EAChCL,KAAK3C,wBAAwBgD,OAAS,EACtCL,KAAK1C,mBAAmB+C,OAAS,EACjCL,KAAKzC,eAAe8C,OAAS,EAC7BL,KAAKxC,gBAAgB6C,OAAS,EAC9BL,KAAKvC,2BAA2B4C,OAAS,EACzCL,KAAKtC,sBAAsB2C,OAAS,EACpCL,KAAKrC,kBAAkB0C,OAAS,EAChCL,KAAKpC,mBAAmByC,OAAS,EACjCL,KAAKnC,kBAAkBwC,OAAS,EAChCL,KAAKlC,uBAAuBuC,OAAS,EACrCL,KAAKjC,mBAAmBsC,OAAS,EACjCL,KAAKhC,mBAAmBqC,OAAS,EACjCL,KAAK/B,oBAAoBoC,OAAS,EAClCL,KAAK9B,+BAA+BmC,OAAS,EACjDL,KAAK1B,sBAAsB+B,OAAS,EAChCL,KAAKzB,mBAAmB8B,OAAS,EACjCL,KAAKxB,iBAAiB6B,OAAS,EACnCL,KAAKvB,aAAa4B,OAAS,EACvBL,KAAKF,aAAc,GAG3BI,cACAE,aACIE,mBACA,OAAON,KAAKE,cAEZK,kBACA,OAAOP,KAAKI,aAEhBI,OAAS,EACTC,QACIT,KAAKE,cAAgB,IAAIQ,aAAa,GAAKV,KAAKhF,cAChDgF,KAAKI,aAAe,IAAIM,aAAa,EAAIV,KAAKhF,cAE9C,IAAK,IAAI2F,EAAIX,KAAKQ,OAAQG,EAAIX,KAAKhF,aAAc2F,IAC7CX,KAAK3B,YAAYuC,KAAKD,GACtBX,KAAK5B,gBAAgBuC,GAAK,EAC1BX,KAAKhD,SAAS2D,GAAK,EACnBX,KAAK/C,WAAW0D,GAAK,EACrBX,KAAK9C,cAAcyD,GAAKE,OAAOC,UAC/Bd,KAAK7C,gBAAgBwD,GAAK,EAC1BX,KAAK5C,kBAAkBuD,GAAKhO,EAAS2D,YAAYmE,OACjDuF,KAAK3C,wBAAwBsD,GAAKhO,EAAS2D,YAAYmE,OACvDuF,KAAK1C,mBAAmBqD,GAAKhO,EAAS2D,YAAYmE,OAClDuF,KAAKzC,eAAeoD,GAAKhO,EAAS2D,YAAYyK,MAC9Cf,KAAKxC,gBAAgBmD,GAAKhO,EAASwM,YAAY1E,OAC/CuF,KAAKvC,2BAA2BkD,GAAKhO,EAAS2D,YAAYmE,OAC1DuF,KAAKtC,sBAAsBiD,GAAK,CAAC,EAAG,EAAG,GACvCX,KAAKrC,kBAAkBgD,GAAKhO,EAAS2D,YAAYyK,MACjDf,KAAKpC,mBAAmB+C,GAAKhO,EAASwM,YAAY4B,MAClDf,KAAKnC,kBAAkB8C,GAAKhO,EAAS2D,YAAYmE,OACjDuF,KAAKlC,uBAAuB6C,IAAK,EACjCX,KAAKjC,mBAAmB4C,GAAK,EAC7BX,KAAKhC,mBAAmB2C,GAAKhO,EAAS2D,YAAYmE,OAClDuF,KAAK/B,oBAAoB0C,GAAKhO,EAAS2D,YAAYmE,OACnDuF,KAAK9B,+BAA+ByC,GAAKhO,EAAS2D,YAAYmE,OAC9DuF,KAAK1B,sBAAsBqC,GAAKhO,EAASmI,YAAY4E,WACrDM,KAAKzB,mBAAmBoC,GAAKhO,EAASmI,YAAY4E,WAClDM,KAAKxB,iBAAiBmC,GAAKhO,EAASmI,YAAY4E,WAChDM,KAAKvB,aAAakC,GAAK,CAAC,EAAG,EAAG,EAAG,GAErCX,KAAKQ,OAASR,KAAKhF,aAEvBgG,QACShB,KAAKT,aACFS,KAAK3E,WAAa,IAAM2E,KAAK9E,QAC7B+F,WAAWjB,KAAKkB,WAAYlB,KAAK3E,YAGjC2E,KAAKkB,cAGblB,KAAKT,YAAa,EAEtB2B,WAAa,KAKT,GAJAlB,KAAKR,gBAAiB,EACtBQ,KAAKhB,mBAAqB,EAC1BgB,KAAKZ,UAAY+B,KAAKC,MACtBpB,KAAKV,gBAAkBU,KAAKZ,UACxBY,KAAK9E,QACL,IAAK,IAAIyF,EAAIX,KAAKxE,aAAe,EAAGmF,GAAK,EAAGA,IACxCX,KAAKZ,WAAauB,EAAIX,KAAK7E,SAAW6E,KAAKxE,aAC3CwE,KAAKqB,cAIjBpB,OACID,KAAKR,gBAAiB,EACjBQ,KAAKF,aACNE,KAAKsB,QAETtB,KAAKT,YAAa,EAEtB+B,QACI,GAAItB,KAAKT,WAAY,CACjBS,KAAKtE,iBAAiB2E,OAAS,EAE/B,IAAK,IAAIM,EADKX,KAAK7B,cAAckC,OACZ,EAAGM,GAAK,EAAGA,IAAK,CACjC,MAAMY,EAAQvB,KAAK7B,cAAcqD,MACjCxB,KAAK5B,gBAAgBmD,GAAS,EAC9BvB,KAAK3B,YAAYuC,KAAKW,IAG9BvB,KAAKT,YAAa,EAEtBkC,WACI,OAAOzB,KAAK0B,UAEhBC,cAAgBhP,EAASmI,YAAY4E,WACrCkC,oBAAsBjP,EAASmI,YAAY4E,WAC3CmC,eAAiBlP,EAASmI,YAAY4E,WACtCoC,aAAenP,EAAS2D,YAAYmE,OACpCsH,cAAgBpP,EAASmI,YAAY4E,WACrCsC,aAAerP,EAAS2D,YAAYmE,OACpCwH,aAAetP,EAAS2D,YAAYmE,OACpCyH,gBAAkBvP,EAASmI,YAAY4E,WACvCyC,UAAYxP,EAASmI,YAAY4E,WACjC0C,eAAiBzP,EAASmI,YAAY4E,WACtC2C,WAAa1P,EAAS2D,YAAYmE,OAClC6H,WAAa3P,EAASiI,eAAe8E,WACrC6C,WAAa5P,EAAS2D,YAAYmE,OAClC+H,WAAa7P,EAAS2D,YAAYmE,OAClCgI,WAAa9P,EAASiI,eAAe8E,WACrCgD,WAAa/P,EAAS2D,YAAYmE,OAClCkI,oBAAsB,EAClBC,yBACA,OAAO5C,KAAK2C,oBAEhBE,iBAAiBC,EAAUC,EAASC,GAE5BF,EACAA,EAASG,UAAUjD,KAAKqC,WAAYrC,KAAKsC,WAAYtC,KAAKuC,aAG1DvC,KAAKuC,WAAWtP,EAAI,EAAG+M,KAAKuC,WAAWpP,EAAI,EAAG6M,KAAKuC,WAAWlP,EAAI,EAClE2M,KAAKsC,WAAWrP,EAAI,EAAG+M,KAAKsC,WAAWnP,EAAI,EAAG6M,KAAKsC,WAAWjP,EAAI,EAAG2M,KAAKsC,WAAW7N,EAAI,EACzFuL,KAAKqC,WAAWpP,EAAI,EAAG+M,KAAKqC,WAAWlP,EAAI,EAAG6M,KAAKqC,WAAWhP,EAAI,GAEtE0P,EAAQE,UAAUjD,KAAKwC,WAAYxC,KAAKyC,WAAYzC,KAAK0C,YACrD1C,KAAKjE,iBAAmB3B,EAAiB8I,MACzClD,KAAKsC,WAAWjM,eAAe,EAAG,EAAG,EAAG,GACxC2J,KAAKyC,WAAWpM,eAAe,EAAG,EAAG,EAAG,IAGnC2J,KAAKjE,iBAAmB3B,EAAiB+I,OAC9CnD,KAAKyC,WAAWpM,eAAe,EAAG,EAAG,EAAG,GAKxC2J,KAAKnE,cAAgB1B,EAAuB2B,YAGvCkE,KAAKnE,cAAgB1B,EAAuByB,MACjDoE,KAAKqC,WAAWhM,eAAe,EAAG,EAAG,IAGrC2J,KAAKqC,WAAWhM,eAAe,EAAG,EAAG,GACrC2J,KAAKwC,WAAWnM,eAAe,EAAG,EAAG,KAEzC1D,EAASmI,YAAYsI,aAAapD,KAAKqC,WAAYrC,KAAKsC,WAAYtC,KAAKuC,WAAYS,GACrFrQ,EAASmI,YAAYsI,aAAapD,KAAKwC,WAAYxC,KAAKyC,WAAYzC,KAAK0C,WAAYnI,EAAmBM,cACxGN,EAAmBM,aAAawI,cAAcL,EAAmBA,GAErEtB,UACI,IAAK1B,KAAKI,eAAiBJ,KAAKE,cAC5B,OAAO,EAEX,MAAMoD,EAAiBtD,KAAKH,oBAC5B,IAAI0D,EAAsBD,EAAe3N,OAAO,GAChDqK,KAAKkC,gBAAkBlC,KAAKP,uBAC5BO,KAAKoC,eAAiBpC,KAAKJ,iBAC3B,IAAI4D,EAAaxD,KAAKL,iBAAiB8D,QACnCC,EAAkB/Q,EAASmI,YAAY4E,WAC3CM,KAAK6C,iBAAiB7C,KAAKkC,gBAAiBlC,KAAKoC,eAAgBsB,GACjE,IAAIC,EAAkBhR,EAASmI,YAAY4E,WACvCkE,EAAYjR,EAAS2D,YAAYmE,OACjCoJ,EAAc,EAClB,MAAMnQ,EAAMsM,KAAK5B,gBAAgBiC,OACjC,IAAK,IAAIM,EAAI,EAAGA,EAAIjN,EAAKiN,IAAK,CAC1B,GAA+B,GAA3BX,KAAK5B,gBAAgBuC,GACrB,SAEJ,MAAMY,EAAQZ,EACRmD,EAAiB9D,KAAK3C,wBAAwBkE,GAC9CwC,EAAiB/D,KAAKvC,2BAA2B8D,GACjDyC,EAAYhE,KAAKtC,sBAAsB6D,GACvC0C,EAAWjE,KAAKrC,kBAAkB4D,GAClC2C,EAASlE,KAAKpC,mBAAmB2D,GAEjC4C,GADWnE,KAAKvB,aAAa8C,GACV,EAAdsC,GAIX7D,KAAKI,aAAa+D,EAAK,GAAKD,EAAOjR,EACnC+M,KAAKI,aAAa+D,EAAK,GAAKD,EAAO/Q,EACnC6M,KAAKI,aAAa+D,EAAK,GAAKD,EAAO7Q,EACnC2M,KAAKI,aAAa+D,EAAK,GAAKD,EAAOzP,EAC/BuL,KAAKrE,iBAAmBzB,EAAuB0B,MAC/C+H,EAAgBnL,SAASkL,IAIzBC,EAAgBnL,SAASwH,KAAKxB,iBAAiB+C,IAC/CiC,EAAWhL,SAASwH,KAAK1B,sBAAsBiD,KAEnD,IAAI6C,EAAYJ,EAAU,GACtBK,EAAYL,EAAU,GACtBM,EAAYN,EAAU,GAC1BrR,EAAS2D,YAAYe,oCAAoCyM,EAAe7Q,EAAI8Q,EAAe9Q,EAAG6Q,EAAe3Q,EAAI4Q,EAAe5Q,EAAG2Q,EAAezQ,EAAI0Q,EAAe1Q,EAAGmQ,EAAYjJ,EAAmBG,eACnMsF,KAAKjE,iBAAmB3B,EAAiB8I,MACzCS,EAAgBV,UAAU1I,EAAmBC,mBAAe2F,OAAWA,GAGvEqD,EAAW9J,oBAAoB6J,GAC/BA,EAAoBgB,gBAAgBjB,GACpCzQ,EAAsB0Q,EAAqBhJ,EAAmBI,kBAE9DhI,EAASmI,YAAYsI,aAAa7I,EAAmBC,cAAeD,EAAmBI,iBAAkBiJ,EAAWD,IAGpHA,EAAgBa,yBAAyB,EAAG,EAAG,GAGnD7R,EAASiI,eAAelG,0BAA0B2P,EAAWD,EAAWE,EAAW/J,EAAmBI,kBACtGhI,EAASmI,YAAYsI,aAAaa,EAAU1J,EAAmBI,iBAAkBiJ,EAAWrJ,EAAmBM,cAC/GN,EAAmBM,aAAawI,cAAcM,EAAiBA,GAC/DA,EAAgBc,eAAelK,EAAmBG,eAElDiJ,EAAgBe,YAAY1E,KAAKE,cAA6B,GAAd2D,GAChDA,IAEJ,OAAOA,EAGXxC,WAAa,KACT,GAAIrB,KAAKT,YAAcS,KAAKR,eAAgB,CACxC,MAAM4B,EAAMD,KAAKC,MACXuD,EAAQvD,EAAMpB,KAAKZ,UACzBY,KAAKZ,UAAYgC,EACjBpB,KAAKhB,oBAAsB2F,EAC3B3E,KAAKX,WAAasF,EAAQ,IAC1B,MAAMC,EAAmBrR,KAAKsR,IAAI7E,KAAKX,WAAY,KAC7CyF,EAAc1D,EAAMpB,KAAKV,gBAEzByF,EAAWxR,KAAK8E,MAAM2H,KAAKhB,mBAAqBgB,KAAK7E,UAC3D,IAAI6J,GAAS,EACTC,EAAQjF,KAAKhB,oBAAsBgB,KAAK9E,QAAU8E,KAAK7E,SAAW,GAAK6E,KAAK7E,SAChF,GAAI8J,EAAQ,IAAMjF,KAAK/E,QAAS,CAE5B,GAAIgK,EAAQjF,KAAK2C,oBAEb,YADA3C,KAAKC,OAGT+E,GAAS,OAGThF,KAAK2C,oBAAsB,EAE/B,MAAMuC,EAAgBlF,KAAKhB,mBAAqBgB,KAAK7E,SACrD,IAAIgK,EAAmB,EACvBnF,KAAKvJ,aAAelD,KAAK8E,MAAM2H,KAAKhB,mBAAqBgB,KAAKzE,cAC9DyE,KAAKtJ,iBAAmBsJ,KAAKhB,mBAAqBgB,KAAKzE,aAAeyE,KAAKzE,aAC3E,MAAM6J,EAAcpF,KAAKvE,OAAO4E,OAEhC,GAAIL,KAAK5E,WAAa2J,EAAU,CAE5B,IAAK,IAAIpE,EAAI,EAAGA,EAAIyE,EAAazE,IAAK,CAClC,MAAO0E,EAAWC,EAAYC,EAAWC,GAAYxF,KAAKvE,OAAOkF,GACjE,GAAIX,KAAK7E,SAAWkK,EAAW,CACtBrF,KAAKtE,iBAAiBiF,KACvBX,KAAKtE,iBAAiBiF,GAAK,GAI/B,GAFsBpN,KAAKkS,MAAMzF,KAAK7E,SAAWkK,GAAaG,GAE1CxF,KAAKtE,iBAAiBiF,GAEtC,KAAO4E,EAAYvF,KAAKtE,iBAAiBiF,IACrCX,KAAKtE,iBAAiBiF,IAAM,EAC5BwE,GAAoBG,EAIhCtF,KAAKtE,iBAAiBiF,GAAK,EAE/BX,KAAK5E,WAAa2J,EAEtB,IAAK,IAAIpE,EAAI,EAAGA,EAAIyE,EAAazE,IAAK,CAClC,MAAO0E,EAAWC,EAAYC,EAAWC,GAAYxF,KAAKvE,OAAOkF,GACjE,GAAIuE,EAAgBG,EAAW,CACtBrF,KAAKtE,iBAAiBiF,KACvBX,KAAKtE,iBAAiBiF,GAAK,GAETpN,KAAKkS,MAAMP,EAAgBG,GAAaG,GAE1CxF,KAAKtE,iBAAiBiF,IAElC4E,EAAYvF,KAAKtE,iBAAiBiF,KAClCX,KAAKtE,iBAAiBiF,IAAM,EAC5BwE,GAAoBG,IAiBpC,IAAII,EAAWnS,KAAK2E,MAAM4M,EAAc,IAAO9E,KAAKxE,cAAgB2J,EAChEO,EAAW,IACX1F,KAAKV,gBAAkB8B,GAEtB4D,IACDU,EAAW,GAEf1F,KAAK2F,QAAQD,GACb,IAAIE,EAAgB5F,KAAK6B,eACzB7B,KAAK6F,OAAOjB,EAAkBgB,KAMtCD,QAAQD,GACJ,MAAMI,EAAY9F,KAAK3B,YAAYgC,OACnCqF,EAAWnS,KAAKsR,IAAIiB,EAAWJ,GAC/B,MAAMK,EAAW/F,KAAKhB,mBAAqBgB,KAAK7E,SAAW6E,KAAK7E,SAC1DuI,EAAkB/Q,EAASmI,YAAY4E,WAC7C,IAAIsG,EAAoBhG,KAAKP,uBACzBxJ,EAAc+J,KAAKL,iBACnBsG,EAAcjG,KAAKJ,iBACvB3J,EAAYgN,UAAUjD,KAAKgC,aAAc,KAAMhC,KAAK8B,cACpD7L,EAAYiQ,uBAAuBlG,KAAK+B,eACxC/B,KAAK+B,cAAcoE,YAAYnG,KAAK6B,gBACpC7B,KAAK6C,iBAAiBmD,EAAmBC,EAAavC,GACtD,IAAK,IAAI/C,EAAI,EAAGA,EAAI+E,EAAU/E,IAAK,CAC/B,MAAMY,EAAQvB,KAAK3B,YAAYmD,MAC/BxB,KAAK1B,sBAAsBiD,GAAO/I,SAASvC,GAC3C+J,KAAKzB,mBAAmBgD,GAAO/I,SAASwH,KAAK6B,gBAC7C7B,KAAKxB,iBAAiB+C,GAAO/I,SAASkL,GACtC1D,KAAKoG,QAAQ7E,EAAOvB,KAAK6B,eAAgBkE,EAAU/F,KAAKvJ,aAAcuJ,KAAKtJ,iBAAkBiK,EAAG+E,GAChG1F,KAAK7C,gBAAgBoE,GAASvB,KAAKhB,mBACnCgB,KAAK7B,cAAcyC,KAAKW,GACxBvB,KAAK5B,gBAAgBmD,GAAS,GAGtC6E,QAAQ7E,EAAOqE,EAAeG,EAAUtP,EAAcC,EAAkBC,EAAeC,GAC/EoJ,KAAKjD,2BACLiD,KAAKjD,0BAA0BqJ,QAAQ7E,GAE3C,MAAM8E,EAAerG,KAAK1B,sBAAsBiD,GAIhD,IAAIxO,EAHAiN,KAAKhE,6BACLgE,KAAK9C,cAAcqE,GAASvB,KAAKhE,2BAA2BsK,YAAYP,IAGxE/F,KAAK5D,0BACLrJ,EAASiN,KAAK5D,wBAAwBkK,YAAYP,GAClD/F,KAAKxC,gBAAgB+D,GAAOlL,eAAetD,EAAO,GAAIA,EAAO,GAAIA,EAAO,GAAIA,EAAO,KAEnFiN,KAAK3D,uBACLtJ,EAASiN,KAAK3D,qBAAqBiK,YAAYP,GAC/C/F,KAAK5C,kBAAkBmE,GAAOlL,eAAetD,EAAO,GAAIA,EAAO,GAAIA,EAAO,KAE9E,IAAIwT,EAAgB,CAAC,EAAG,EAAG,GACvBvG,KAAK7D,6BACLoK,EAAgBvG,KAAK7D,2BAA2BmK,YAAYP,IAEhE/F,KAAKtC,sBAAsB6D,GAAO,GAAKgF,EAAc,GACrDvG,KAAKtC,sBAAsB6D,GAAO,GAAKgF,EAAc,GACrDvG,KAAKtC,sBAAsB6D,GAAO,GAAKgF,EAAc,GACrD,MAAMC,EAAYxG,KAAKzC,eAAegE,GAClCvB,KAAK9D,yBACLnJ,EAASiN,KAAK9D,uBAAuBoK,YAAYP,GACjDS,EAAUnQ,eAAetD,EAAO,GAAIA,EAAO,GAAIA,EAAO,KAE1D,IAAI0T,EAAa,EACbzG,KAAK/D,0BACLwK,EAAazG,KAAK/D,wBAAwBqK,YAAYP,IAE1D,MAAMW,EAAqB1G,KAAK3C,wBAAwBkE,GACxD1H,EAAiBI,sBAAsB+F,KAAK1E,aAAc+K,EAAcK,EAAoBjQ,EAAcC,EAAkBC,EAAeC,GAAe,GAC1J,MAAM+P,EAAiB3G,KAAK/B,oBAAoBsD,GAChD1H,EAAiB+M,uBAAuB5G,KAAK1E,aAAc+K,EAAcM,EAAgBD,GAAoB,GAC7GC,EAAeE,aAAaJ,GACxBzG,KAAKrB,4BAA8BqB,KAAK1D,oCACpC0D,KAAK1D,kCAAkCvH,MAAQ,YAAoCiL,KAAK1D,kCAAkCvH,MAAQ,iBAClIhC,EAASiN,KAAK1D,kCAAkCgK,YAAYP,GAC5D/F,KAAKf,aAAa5I,eAAetD,EAAO,GAAIA,EAAO,GAAIA,EAAO,IAC9DiN,KAAKf,aAAa6H,cAAc9G,KAAKnC,kBAAkB0D,GAAQvB,KAAKf,cAE/De,KAAKzD,6BAEN5J,EAAS2D,YAAYe,oCAAoC2I,KAAKf,aAAahM,EAAG+M,KAAKf,aAAa9L,EAAG6M,KAAKf,aAAa5L,EAAGuS,EAAe5F,KAAKf,cAEhJ0H,EAAeI,WAAW/G,KAAKf,cAC/Be,KAAKnC,kBAAkB0D,GAAOlL,eAAetD,EAAO,GAAIA,EAAO,GAAIA,EAAO,MAG9EiN,KAAKpB,iCAAmCoB,KAAKvD,yCAC7CuD,KAAKjC,mBAAmBwD,GAASV,OAAOmG,iBACpChH,KAAKvD,uCAAuC1H,MAAQ,YAAoCiL,KAAKvD,uCAAuC1H,MAAQ,iBAC5IiL,KAAKjC,mBAAmBwD,GAASvB,KAAKvD,uCAAuC6J,YAAY,KAGjGtG,KAAK9B,+BAA+BqD,GAAO/I,SAASmO,GACpD3G,KAAKnC,kBAAkB0D,GAAOlL,eAAe,EAAG,EAAG,GACnD2J,KAAKvC,2BAA2B8D,GAAOlL,eAAe,EAAG,EAAG,GAC5D2J,KAAKrC,kBAAkB4D,GAAO/I,SAASgO,GACvCxG,KAAKlC,uBAAuByD,IAAS,EAMzCsE,OAAOjB,EAAkBgB,GAErB,MAAMqB,EAAQjH,KAAK5B,gBAAgBiC,OACnC,IAAItN,EACJ,IAAK,IAAI4N,EAAI,EAAGA,EAAIsG,EAAOtG,IAAK,CAC5B,GAA+B,GAA3BX,KAAK5B,gBAAgBuC,GACrB,SAEJ,IAAIY,EAAQZ,EACRX,KAAKrE,iBAAmBzB,EAAuBiJ,QAC/CyC,EAAgB5F,KAAKzB,mBAAmBgD,IAE5C,IAAI2F,EAAYlH,KAAK7C,gBAAgBoE,GACjC4F,EAAMnH,KAAKhB,mBAAqBkI,EACpClH,KAAKhD,SAASuE,GAAS4F,EACvBnH,KAAK/C,WAAWsE,GAAShO,KAAKsR,IAAI,EAAKsC,EAAMnH,KAAK9C,cAAcqE,IAChE,IAAI6F,EAAQpH,KAAK/C,WAAWsE,GACxB8F,EAAY9T,KAAKsR,IAAI,EAAKsC,EAAM,KAChCnH,KAAKjD,2BACLiD,KAAKjD,0BAA0BuJ,YAAYc,EAAOpH,KAAKvB,aAAc8C,GAGrEvB,KAAKnB,yBAA2BmB,KAAKpD,gCACrC7J,EAASiN,KAAKpD,+BAA+B0J,YAAYc,GACzDpH,KAAKd,aAAa7I,eAAetD,EAAO,GAAIA,EAAO,GAAIA,EAAO,GAAIA,EAAO,IACzEiN,KAAKd,aAAaoI,gBAAgBtH,KAAKxC,gBAAgB+D,IACvDvB,KAAKpC,mBAAmB2D,GAAO/I,SAASwH,KAAKd,eAG7Cc,KAAKpC,mBAAmB2D,GAAO/I,SAASwH,KAAKxC,gBAAgB+D,IAG7DvB,KAAKlB,wBAA0BkB,KAAKnD,+BAEpC9J,EAASiN,KAAKnD,8BAA8ByJ,YAAYc,GACxDpH,KAAKrC,kBAAkB4D,GAAOlL,eAAetD,EAAO,GAAIA,EAAO,GAAIA,EAAO,IAC1EiN,KAAKrC,kBAAkB4D,GAAO+F,gBAAgBtH,KAAKzC,eAAegE,KAGlEvB,KAAKrC,kBAAkB4D,GAAO/I,SAASwH,KAAKzC,eAAegE,IAG3DvB,KAAKjB,4BAA8BiB,KAAKlD,oCAExC/J,EAASiN,KAAKlD,kCAAkCwJ,YAAYe,GAI5DrH,KAAKtC,sBAAsB6D,GAAO,IAAMxO,EAAO,GAAK6R,EACpD5E,KAAKtC,sBAAsB6D,GAAO,IAAMxO,EAAO,GAAK6R,EACpD5E,KAAKtC,sBAAsB6D,GAAO,IAAMxO,EAAO,GAAK6R,GAExD,IAAI2C,EAAoBvH,KAAK9B,+BAA+BqD,GAExDvB,KAAKrB,4BAA8BqB,KAAK1D,oCAEpC0D,KAAK1D,kCAAkCvH,MAAQ,YAAoCiL,KAAK1D,kCAAkCvH,MAAQ,iBAIlIhC,EAASiN,KAAK1D,kCAAkCgK,YAAYc,GAC5DpH,KAAKf,aAAa5I,eAAetD,EAAO,GAAIA,EAAO,GAAIA,EAAO,IAC9DiN,KAAKf,aAAa6H,cAAc9G,KAAKnC,kBAAkB0D,GAAQvB,KAAKf,cAE/De,KAAKzD,6BAEN5J,EAAS2D,YAAYe,oCAAoC2I,KAAKf,aAAahM,EAAG+M,KAAKf,aAAa9L,EAAG6M,KAAKf,aAAa5L,EAAGuS,EAAe5F,KAAKf,cAEhJsI,EAAkBR,WAAW/G,KAAKf,cAClCe,KAAKnC,kBAAkB0D,GAAOlL,eAAetD,EAAO,GAAIA,EAAO,GAAIA,EAAO,MAIlFwU,EAAkBC,WAAW5C,EAAkB5E,KAAKyH,gBAEpDzH,KAAKvC,2BAA2B8D,GAAOwF,WAAW/G,KAAKyH,gBAEvD,IAAIC,EAAU1H,KAAK5C,kBAAkBmE,GAuBrC,GArBA5O,EAAS2D,YAAYe,oCAAoCqQ,EAAQzU,EAAGyU,EAAQvU,EAAGuU,EAAQrU,EAAGuS,EAAe5F,KAAKf,cAE9Ge,KAAKf,aAAauI,WAAW5C,EAAkB5E,KAAKf,cAEpDsI,EAAkBR,WAAW/G,KAAKf,cAE9Be,KAAKtB,yBAA2BsB,KAAKtD,iCAErC3J,EAASiN,KAAKtD,+BAA+B4J,YAAYc,GACzDpH,KAAKf,aAAa5I,eAAetD,EAAO,GAAIA,EAAO,GAAIA,EAAO,IAEzDiN,KAAKrD,mBAENhK,EAAS2D,YAAYe,oCAAoC2I,KAAKf,aAAahM,EAAG+M,KAAKf,aAAa9L,EAAG6M,KAAKf,aAAa5L,EAAGuS,EAAe5F,KAAKf,cAGhJe,KAAKf,aAAauI,WAAW5C,EAAkB5E,KAAKf,cAEpDsI,EAAkBR,WAAW/G,KAAKf,eAGlCe,KAAKpB,iCAAmCoB,KAAKvD,uCAAwC,CACrF,IAAIkL,EAAgB9G,OAAOmG,iBAEvBW,EADA3H,KAAKvD,uCAAuC1H,MAAQ,YAAoCiL,KAAKvD,uCAAuC1H,MAAQ,eAC5HiL,KAAKjC,mBAAmBwD,GAGxBvB,KAAKvD,uCAAuC6J,YAAYc,GAE5E,IAAIQ,EAAaL,EAAkBlH,SAC/BuH,EAAaD,GACbJ,EAAkBV,aAAa,EAAM7G,KAAKxD,iCAAmCoL,EAAaD,GAAiBC,EAAa,OAOxIH,eAAiB9U,EAAS2D,YAAYmE,OAItCoN,QAAU,KACN,MACMC,EAAW,GACjB,IAAK,IAAInH,EAFKX,KAAK7B,cAAckC,OAEZ,EAAGM,GAAK,EAAGA,IAAK,CACjC,MAAMY,EAAQvB,KAAK7B,cAAcwC,GAC3BwG,EAAMnH,KAAKhD,SAASuE,GAE1B,IAAIwG,EADS/H,KAAK9C,cAAcqE,GACX4F,EACrBnH,KAAK2C,oBAAsBpP,KAAKyF,IAAIgH,KAAK2C,oBAAqBoF,GAC1DA,GAAW,GAEX/H,KAAK5B,gBAAgBmD,GAAS,EAC9BvB,KAAK3B,YAAYuC,KAAKW,GACtBvB,KAAKhD,SAASuE,GAAS,EACvBvB,KAAK9C,cAAcqE,GAASV,OAAOC,UACnCd,KAAKvC,2BAA2B8D,GAAOlL,eAAe,EAAG,EAAG,GAE5D2J,KAAKtC,sBAAsB6D,GAAO,GAAK,EACvCvB,KAAKtC,sBAAsB6D,GAAO,GAAK,EACvCvB,KAAKtC,sBAAsB6D,GAAO,GAAK,EACvCvB,KAAKrC,kBAAkB4D,GAAOlL,eAAe,EAAG,EAAG,IAGnDyR,EAASlH,KAAKW,GAGtBvB,KAAK7B,cAAckC,OAAS,EAC5BL,KAAK7B,cAAgB2J,GAMzBE,uBAEAC,aAAe,EC7vBZ,IAAIC,GACX,SAAWA,GAIPA,EAA0BA,EAAgC,KAAI,GAAK,OAJvE,CAKGA,IAA8BA,EAA4B,KAmBtD,SAASnR,EAAY8N,EAAK7L,EAAKV,GAClC,OAAIuM,IAAQ7L,EACD6L,EAEFvM,GAAUU,EAAM6L,GAAQA,EAuB9B,SAASsD,EAAatD,EAAK7L,EAAKjG,EAAQqV,EAASC,EAASC,GAC7DvV,EAAO,GAAKgE,EAAY8N,EAAI,GAAI7L,EAAI,GAAIoP,GACpCrV,EAAO,GAAKgE,EAAY8N,EAAI,GAAI7L,EAAI,GAAIqP,GACxCtV,EAAO,GAAKgE,EAAY8N,EAAI,GAAI7L,EAAI,GAAIsP,GAYzC,SAASC,EAAa1D,EAAK7L,EAAKjG,EAAQqV,EAASC,EAASC,EAASE,GACtEzV,EAAO,GAAKgE,EAAY8N,EAAI,GAAI7L,EAAI,GAAIoP,GACpCrV,EAAO,GAAKgE,EAAY8N,EAAI,GAAI7L,EAAI,GAAIqP,GACxCtV,EAAO,GAAKgE,EAAY8N,EAAI,GAAI7L,EAAI,GAAIsP,GACxCvV,EAAO,GAAKgE,EAAY8N,EAAI,GAAI7L,EAAI,GAAIwP,GAEhD,SAASlQ,IACL,OAAO/E,KAAK+E,SA4BT,SAASmQ,EAAmBC,EAAQC,GACvC,IAAIC,EAAWD,EA5FI,GA4FkBtI,OACrC,GAAgB,GAAZuI,EACA,OAAOD,EA1FU,GA4FrB,IAAIE,EAAW,EACXC,EAAYF,EAAW,EACvBG,EAAMJ,EAlGS,GAkGaE,GAC5BG,EAAOL,EAnGQ,GAmGcG,GACjC,GAAgB,GAAZF,EACA,OAAOG,EAjIO,GAiIcJ,EAjGX,GAmGrB,IAAK,IAAIhI,EAAI,EAAGA,EAAIiI,EAAW,EAAGjI,IAAK,CAKnC,GAJAkI,EAAWlI,EACXmI,EAAYnI,EAAI,EAChBoI,EAAMJ,EA1GS,GA0GaE,GAC5BG,EAAOL,EA3GQ,GA2GcG,GACb,GAAZD,GAAiBH,GAAUK,EA5IjB,GA4IqC,CAC/CD,EAAYD,EACZG,EAAOD,EACP,MAEJ,GAAIA,EAjJU,GAiJWL,GAAUA,EAASM,EAjJ9B,GAkJV,MAEJ,GAAIF,GAAaF,EAAW,GAAKI,EApJnB,IAoJ0CN,EAAQ,CAC5DG,EAAWC,EACXC,EAAMC,EACN,OAGR,OAAIH,GAAYC,EACLC,EAvJO,GAuJcJ,EAvHX,IAyHrBD,GAAUA,EAASK,EA7JD,KA6JwBC,EA7JxB,GA6J8CD,EA7J9C,IA4Gf,SAAiBE,EAAQC,EAAUC,EAAQC,EAAUV,GACxD,IAAIW,EAAUX,EAASA,EACnBY,EAAQZ,EAASW,EAKrB,OAAUJ,GAJI,EAAMK,EAAU,EAAMD,EAAY,GAInBF,IAHf,EAAMG,EAAU,EAAMD,GAGaH,GAFpCI,EAAS,EAAMD,EAAYX,GAE+BU,GAD3DE,EAAQD,GA4CbE,CAAQR,EA1JG,GA0JiBA,EAlJZ,GAkJqCC,EA1J1C,GA0J+DA,EAtJ3D,GAsJoFN,GAAWC,EA1HhG,IAyKzB,MAEMa,EAAc,CAAC,EAAG,EAAG,GACrBC,EAAc,CAAC,EAAG,EAAG,EAAG,GAGxBC,EAAe,CAAC,EAAG,EAAG,GACtBC,EAAe,CAAC,EAAG,EAAG,EAAG,GAMxB,MAAMC,EACT7U,KAAO,WACP8U,UACAC,UACAC,SACAC,SACA1D,YAAYoC,GACR,OAAQ1I,KAAKjL,MACT,KAAM,EAAoC,aAElC,OAAOgC,EAAYiJ,KAAK6J,WAAa,EAAG7J,KAAK8J,WAAa,EAAGxR,KAErE,KAAM,EAA6B,MAE/B,OAAOmQ,EAAmBC,EADZ1I,KAAK+J,UAAY/J,KAAKgK,UAGxC,KAAM,EAAiC,UAGnC,OAAOjT,EAFK0R,EAAmBC,EAAQ1I,KAAK+J,UAChCtB,EAAmBC,EAAQ1I,KAAKgK,UACf1R,KAEjC,QACI,OAAO0H,KAAK6J,WAAa7J,KAAK8J,WAAa,GAIvD/J,UACIC,KAAK6J,eAAY1J,EACjBH,KAAK8J,eAAY3J,EACjBH,KAAK+J,cAAW5J,EAChBH,KAAKgK,cAAW7J,GAMjB,MAAM8J,EACTlV,KAAO,WACP8U,UACAC,UACAI,UACAC,UACA7D,YAAYoC,GACR,OAAQ1I,KAAKjL,MACT,KAAM,EAAoC,aAGlC,OADAoT,EAAanI,KAAK6J,UAAW7J,KAAK8J,UAAWN,EAAalR,IAAUA,IAAUA,KACvEkR,EAEf,KAAM,EAA6B,MAAG,CAClC,MAAMY,EAASpK,KAAKkK,UAAU,IAAMlK,KAAKmK,UAAU,GAC7CE,EAASrK,KAAKkK,UAAU,IAAMlK,KAAKmK,UAAU,GAC7CG,EAAStK,KAAKkK,UAAU,IAAMlK,KAAKmK,UAAU,GAInD,OAHAX,EAAY,GAAKf,EAAmBC,EAAQ0B,GAC5CZ,EAAY,GAAKf,EAAmBC,EAAQ2B,GAC5Cb,EAAY,GAAKf,EAAmBC,EAAQ4B,GACrCd,EAEX,KAAM,EAAiC,UAAG,CACtC,MAAMe,EAAYvK,KAAKkK,UAAU,GAC3BM,EAAYxK,KAAKkK,UAAU,GAC3BO,EAAYzK,KAAKkK,UAAU,GAC3BQ,EAAY1K,KAAKmK,UAAU,GAC3BQ,EAAY3K,KAAKmK,UAAU,GAC3BS,EAAY5K,KAAKmK,UAAU,GAQjC,OAPAX,EAAY,GAAKf,EAAmBC,EAAQ6B,GAC5Cf,EAAY,GAAKf,EAAmBC,EAAQ8B,GAC5ChB,EAAY,GAAKf,EAAmBC,EAAQ+B,GAC5Cf,EAAa,GAAKjB,EAAmBC,EAAQgC,GAC7ChB,EAAa,GAAKjB,EAAmBC,EAAQiC,GAC7CjB,EAAa,GAAKjB,EAAmBC,EAAQkC,GAC7CzC,EAAaqB,EAAaE,EAAcF,EAAalR,IAAUA,IAAUA,KAClEkR,EAEX,QACI,OAAOxJ,KAAK6J,WAAa7J,KAAK8J,WAI1C/J,UACIC,KAAK6J,eAAY1J,EACjBH,KAAK8J,eAAY3J,EACjBH,KAAKkK,eAAY/J,EACjBH,KAAKmK,eAAYhK,GAMlB,MAAM0K,EACT9V,KAAO,WACP8U,UACAC,UACAI,UACAC,UACA7D,YAAYoC,GACR,OAAQ1I,KAAKjL,MACT,KAAM,EAAoC,aAGlC,OADAwT,EAAavI,KAAK6J,UAAW7J,KAAK8J,UAAWL,EAAanR,IAAUA,IAAUA,IAAUA,KACjFmR,EAEf,KAAM,EAA6B,MAAG,CAClC,MAAMW,EAASpK,KAAKkK,UAAU,IAAMlK,KAAKmK,UAAU,GAC7CE,EAASrK,KAAKkK,UAAU,IAAMlK,KAAKmK,UAAU,GAC7CG,EAAStK,KAAKkK,UAAU,IAAMlK,KAAKmK,UAAU,GAC7CW,EAAS9K,KAAKkK,UAAU,IAAMlK,KAAKmK,UAAU,GAKnD,OAJAV,EAAY,GAAKhB,EAAmBC,EAAQ0B,GAC5CX,EAAY,GAAKhB,EAAmBC,EAAQ2B,GAC5CZ,EAAY,GAAKhB,EAAmBC,EAAQ4B,GAC5Cb,EAAY,GAAKhB,EAAmBC,EAAQoC,GACrCrB,EAEX,KAAM,EAAiC,UAAG,CACtC,MAAMc,EAAYvK,KAAKkK,UAAU,GAC3BM,EAAYxK,KAAKkK,UAAU,GAC3BO,EAAYzK,KAAKkK,UAAU,GAC3Ba,EAAY/K,KAAKkK,UAAU,GAC3BQ,EAAY1K,KAAKmK,UAAU,GAC3BQ,EAAY3K,KAAKmK,UAAU,GAC3BS,EAAY5K,KAAKmK,UAAU,GAC3Ba,EAAYhL,KAAKmK,UAAU,GAUjC,OATAV,EAAY,GAAKhB,EAAmBC,EAAQ6B,GAC5Cd,EAAY,GAAKhB,EAAmBC,EAAQ8B,GAC5Cf,EAAY,GAAKhB,EAAmBC,EAAQ+B,GAC5ChB,EAAY,GAAKhB,EAAmBC,EAAQqC,GAC5CpB,EAAa,GAAKlB,EAAmBC,EAAQgC,GAC7Cf,EAAa,GAAKlB,EAAmBC,EAAQiC,GAC7ChB,EAAa,GAAKlB,EAAmBC,EAAQkC,GAC7CjB,EAAa,GAAKlB,EAAmBC,EAAQsC,GAC7CzC,EAAakB,EAAaE,EAAcF,EAAanR,IAAUA,IAAUA,IAAUA,KAC5EmR,EAEX,QACI,OAAOzJ,KAAK6J,WAAa7J,KAAK8J,WAI1C/J,UACIC,KAAK6J,eAAY1J,EACjBH,KAAK8J,eAAY3J,EACjBH,KAAKkK,eAAY/J,EACjBH,KAAKmK,eAAYhK,GC9WlB,IAAI8K,EAKAC,EAKAC,GATX,SAAWF,GACPA,EAAQA,EAAgB,OAAI,GAAK,SACjCA,EAAQA,EAAgB,OAAI,GAAK,SAFrC,CAGGA,IAAYA,EAAU,KAEzB,SAAWC,GACPA,EAASA,EAAkB,QAAI,GAAK,UACpCA,EAASA,EAAgB,MAAI,GAAK,QAFtC,CAGGA,IAAaA,EAAW,KAE3B,SAAWC,GACPA,EAAcA,EAA0B,WAAI,GAAK,aACjDA,EAAcA,EAAyB,UAAI,GAAK,YAFpD,CAGGA,IAAkBA,EAAgB,KCRrCC,OAAOC,KAAO,CACVvW,IAAG,EACH6D,KAAI,EACJJ,OAAM,EACNU,KAAI,EACJC,WAAU,EACVO,MAAK,EACLE,UAAS,EACTC,OAAM,EACNW,mBAAkB,EAClB5H,SAAQ,EACRiC,SAAQ,EACRyF,wBAAuB,EACvBiR,aDHG,MACHC,QAAU,GACVC,eAAiB,GACjBC,QAAUR,EAAQ1V,OAClBmW,UAAY,EACZC,SAAWT,EAASU,QACpBC,SAAWV,EAAcW,WACzBC,QAAU,EACVC,QAAU,EAEVC,QAAU,EACVC,QAAU,EACNC,WAAO/S,GACP4G,KAAK+L,QAAU3S,EACf4G,KAAKiM,QAAU,EAAI7S,EAGnBgT,WAAOhT,GACP4G,KAAKgM,QAAU5S,EACf4G,KAAKkM,QAAU,EAAI9S,EAGvBiT,cACAC,WACAC,OAAS,EACTC,QAAS,EACTpG,QAAQ7E,GACJvB,KAAKwL,eAAejK,GAASvB,KAAKsM,WAAWhG,YAAY,GACzDtG,KAAKuL,QAAQhK,GAAShO,KAAK2E,MAAM3E,KAAK+E,SAAW0H,KAAKgM,SAAWhM,KAAKgM,QAE1E1F,YAAYoC,EAAQ+D,EAAMlL,GACtB,GAAIvB,KAAKwM,QAAUxM,KAAKqM,cAAe,CACnC,MAAMK,EAAgB1M,KAAKqM,cAAc/F,YAAaoC,EAAS1I,KAAKuM,OAAU,GAC9E,IAAIvL,EAAQhB,KAAKwL,eAAejK,GAC5BoL,EAAS,EACTC,EAAQ,EACRC,EAAQ,EACR7M,KAAK6L,UAAYV,EAAc2B,WAE3BD,EADA7M,KAAKyL,SAAWR,EAAQ8B,OAChB/M,KAAK0L,UAGL1L,KAAKuL,QAAQhK,GAEzBqL,EAAQrZ,KAAK8E,OAAQ2I,EAAQ0L,GAAiB1M,KAAK+L,QAAW/L,KAAK+L,WAGnEY,EAAS3L,EAAQ0L,EAAgB1M,KAAK+L,QAAU/L,KAAKgM,QACrDY,EAAQrZ,KAAK8E,MAAMsU,EAAS3M,KAAK+L,SACjCc,EAAQtZ,KAAK8E,MAAMsU,EAAS3M,KAAK+L,UAErCU,EAAKlL,GAAO,GAAKvB,KAAK+L,QAClBU,EAAKlL,GAAO,GAAKvB,KAAKgM,QACtBS,EAAKlL,GAAO,GAAKqL,EAEjBH,EAAKlL,GAAO,GAAMvB,KAAKgM,QAAUa,EAAQ,OAG7CJ,EAAKlL,GAAO,GAAKvB,KAAK+L,QAClBU,EAAKlL,GAAO,GAAKvB,KAAKgM,QACtBS,EAAKlL,GAAO,GAAK,EAEjBkL,EAAKlL,GAAO,GAAMvB,KAAKgM,QAAU,EAAI,IC1DjD9R,uBAAsB,EACtB0P,mBAAkB,EAClBK,oBAAmB,EACnBY,oBAAmB,I","sources":["webpack://particlesystem/./src/math/math.ts","webpack://particlesystem/./src/emitter/mode.ts","webpack://particlesystem/./src/emitter/box.ts","webpack://particlesystem/./src/emitter/config.ts","webpack://particlesystem/./src/emitter/circle.ts","webpack://particlesystem/./src/emitter/cone.ts","webpack://particlesystem/./src/emitter/edge.ts","webpack://particlesystem/./src/emitter/hemisphere.ts","webpack://particlesystem/./src/emitter/point.ts","webpack://particlesystem/./src/emitter/rectangle.ts","webpack://particlesystem/./src/emitter/sphere.ts","webpack://particlesystem/./src/emitter/shape_emitter.ts","webpack://particlesystem/./src/iparticle_system_config.ts","webpack://particlesystem/./src/compute.ts","webpack://particlesystem/./src/interpolation.ts","webpack://particlesystem/./src/texture_sheet.ts","webpack://particlesystem/./src/index.ts"],"sourcesContent":["export class MathTool {\r\n    static ScalarTool;\r\n    static Vector3Tool;\r\n    static Vector4Tool;\r\n    static QuaternionTool;\r\n    static Matrix4Tool;\r\n}\r\nexport function directionToQuaternion(direction, result) {\r\n    const xAxis = direction.x;\r\n    const yAxis = direction.y;\r\n    const zAxis = direction.z;\r\n    let yaw = -Math.atan2(zAxis, xAxis) + Math.PI / 2;\r\n    let len = Math.sqrt(xAxis * xAxis + zAxis * zAxis);\r\n    let pitch = -Math.atan2(yAxis, len);\r\n    RotationYawPitchRollToRef(yaw, pitch, 0, result);\r\n}\r\nexport function RotationYawPitchRollToRef(yaw, pitch, roll, result) {\r\n    // Produces a quaternion from Euler angles in the z-y-x orientation (Tait-Bryan angles)\r\n    var halfRoll = roll * 0.5;\r\n    var halfPitch = pitch * 0.5;\r\n    var halfYaw = yaw * 0.5;\r\n    var sinRoll = Math.sin(halfRoll);\r\n    var cosRoll = Math.cos(halfRoll);\r\n    var sinPitch = Math.sin(halfPitch);\r\n    var cosPitch = Math.cos(halfPitch);\r\n    var sinYaw = Math.sin(halfYaw);\r\n    var cosYaw = Math.cos(halfYaw);\r\n    result.x = (cosYaw * sinPitch * cosRoll) + (sinYaw * cosPitch * sinRoll);\r\n    result.y = (sinYaw * cosPitch * cosRoll) - (cosYaw * sinPitch * sinRoll);\r\n    result.z = (cosYaw * cosPitch * sinRoll) - (sinYaw * sinPitch * cosRoll);\r\n    result.w = (cosYaw * cosPitch * cosRoll) + (sinYaw * sinPitch * sinRoll);\r\n}\r\n","export var EShapeEmitterMode;\r\n(function (EShapeEmitterMode) {\r\n    EShapeEmitterMode[EShapeEmitterMode[\"Box\"] = 1] = \"Box\";\r\n    EShapeEmitterMode[EShapeEmitterMode[\"Cone\"] = 2] = \"Cone\";\r\n    EShapeEmitterMode[EShapeEmitterMode[\"Hemisphere\"] = 3] = \"Hemisphere\";\r\n    EShapeEmitterMode[EShapeEmitterMode[\"Sphere\"] = 4] = \"Sphere\";\r\n    EShapeEmitterMode[EShapeEmitterMode[\"Point\"] = 5] = \"Point\";\r\n    EShapeEmitterMode[EShapeEmitterMode[\"Edge\"] = 6] = \"Edge\";\r\n    EShapeEmitterMode[EShapeEmitterMode[\"Circle\"] = 7] = \"Circle\";\r\n    EShapeEmitterMode[EShapeEmitterMode[\"Rectangle\"] = 8] = \"Rectangle\";\r\n})(EShapeEmitterMode || (EShapeEmitterMode = {}));\r\nexport var EArcMode;\r\n(function (EArcMode) {\r\n    EArcMode[EArcMode[\"Random\"] = 0] = \"Random\";\r\n    EArcMode[EArcMode[\"Loop\"] = 1] = \"Loop\";\r\n    EArcMode[EArcMode[\"PingPong\"] = 2] = \"PingPong\";\r\n    EArcMode[EArcMode[\"BurstsDpread\"] = 3] = \"BurstsDpread\";\r\n})(EArcMode || (EArcMode = {}));\r\n/**\r\n * 形状发射器创建模式\r\n */\r\nexport var EShapeEmitterDirectionMode;\r\n(function (EShapeEmitterDirectionMode) {\r\n    EShapeEmitterDirectionMode[EShapeEmitterDirectionMode[\"Unity\"] = 0] = \"Unity\";\r\n})(EShapeEmitterDirectionMode || (EShapeEmitterDirectionMode = {}));\r\n","import { MathTool } from \"../math/math\";\r\nimport { EArcMode, EShapeEmitterDirectionMode, EShapeEmitterMode } from \"./mode\";\r\nexport class Box {\r\n    static Config() {\r\n        return {\r\n            mode: EShapeEmitterMode.Box,\r\n            radius: 1,\r\n            angle: 0,\r\n            radiusThickness: 1,\r\n            baseHeight: 0,\r\n            height: 5,\r\n            heightRange: 1,\r\n            arcMode: EArcMode.Random,\r\n            arcValue: 1,\r\n            arcSpread: 1,\r\n            arcSpeed: 1,\r\n            scale: [1, 1, 1],\r\n            directionMode: EShapeEmitterDirectionMode.Unity,\r\n            emitFromSpawnPointOnly: false,\r\n            directionRandomizer: 0,\r\n        };\r\n    }\r\n    static computeDirection(config, worldMatrix, resultDirection, localPosition, isLocal) {\r\n        // 局部方向固定\r\n        if (isLocal) {\r\n            resultDirection.copyFromFloats(0, 0, 1);\r\n        }\r\n        else {\r\n            MathTool.Vector3Tool.TransformNormalFromFloatsToRef(0, 0, 1, worldMatrix, resultDirection);\r\n        }\r\n    }\r\n    static startPositionFunction(config, worldMatrix, resultPosition, emissionLoop, emissionProgress, emissionIndex, emissionTotal, isLocal) {\r\n        var randX = MathTool.ScalarTool.RandomRange(-config.radiusThickness, config.radiusThickness);\r\n        var randY = MathTool.ScalarTool.RandomRange(-config.radiusThickness, config.radiusThickness);\r\n        var randZ = MathTool.ScalarTool.RandomRange(-config.radiusThickness, config.radiusThickness);\r\n        randX = (randX > 0 ? 1 : -1) - randX;\r\n        randY = (randY > 0 ? 1 : -1) - randY;\r\n        randZ = (randZ > 0 ? 1 : -1) - randZ;\r\n        let sx = (config.scale[0] || 1) / 2;\r\n        let sy = (config.scale[1] || 1) / 2;\r\n        let sz = (config.scale[2] || 1) / 2;\r\n        if (isLocal) {\r\n            resultPosition.copyFromFloats(randX * sx, randY * sy, randZ * sz);\r\n        }\r\n        else {\r\n            MathTool.Vector3Tool.TransformCoordinatesFromFloatsToRef(randX * sx, randY * sy, randZ * sz, worldMatrix, resultPosition);\r\n        }\r\n    }\r\n}\r\n","import { EArcMode } from \"./mode\";\r\nexport let SpreadLimit = 0.0001;\r\nexport function computeRadians(emission_loop, emission_progress, emission_index, emission_total, arc_total_value, arc_value, arc_spread, arc_speed, arc_mode) {\r\n    let s;\r\n    emission_progress = emission_progress * arc_speed;\r\n    switch (arc_mode) {\r\n        case (EArcMode.Loop): {\r\n            let radians = (emission_loop + emission_progress) * arc_total_value;\r\n            s = radians % arc_value;\r\n            if (SpreadLimit < arc_spread) {\r\n                arc_spread = arc_spread * arc_value;\r\n                s = Math.round(s / arc_spread) * arc_spread;\r\n            }\r\n            break;\r\n        }\r\n        case (EArcMode.PingPong): {\r\n            let radians = (emission_loop + emission_progress) * arc_total_value;\r\n            let loop_count = Math.floor(radians / arc_value);\r\n            s = radians % arc_value;\r\n            if (SpreadLimit < arc_spread) {\r\n                arc_spread = arc_spread * arc_value;\r\n                s = Math.round(s / arc_spread) * arc_spread;\r\n            }\r\n            if (loop_count % 2 == 1) {\r\n                s = arc_value;\r\n            }\r\n            break;\r\n        }\r\n        case (EArcMode.BurstsDpread): {\r\n            emission_progress = emission_index / emission_total;\r\n            if (SpreadLimit < arc_spread) {\r\n                arc_spread = arc_spread * arc_value;\r\n                emission_progress = Math.round(emission_progress / arc_spread) * arc_spread;\r\n            }\r\n            s = arc_value * emission_progress;\r\n            break;\r\n        }\r\n        default: {\r\n            s = Math.random() * arc_value;\r\n            break;\r\n        }\r\n    }\r\n    return s;\r\n}\r\n","import { MathTool } from \"../math/math\";\r\nimport { computeRadians } from \"./config\";\r\nimport { EArcMode, EShapeEmitterDirectionMode, EShapeEmitterMode } from \"./mode\";\r\nexport class Circle {\r\n    static Config() {\r\n        return {\r\n            mode: EShapeEmitterMode.Circle,\r\n            radius: 1,\r\n            angle: 0,\r\n            radiusThickness: 1,\r\n            baseHeight: 0,\r\n            height: 5,\r\n            heightRange: 1,\r\n            arcMode: EArcMode.Random,\r\n            arcValue: Math.PI * 2,\r\n            arcSpread: 0,\r\n            arcSpeed: 1,\r\n            scale: [1, 1, 1],\r\n            directionMode: EShapeEmitterDirectionMode.Unity,\r\n            emitFromSpawnPointOnly: false,\r\n            directionRandomizer: 0,\r\n        };\r\n    }\r\n    static computeDirection(config, worldMatrix, resultDirection, localPosition, isLocal) {\r\n        // 局部方向为 局部原点指向 局部点\r\n        resultDirection.copyFrom(localPosition).normalize();\r\n        if (isLocal) {\r\n            //\r\n        }\r\n        else {\r\n            // 转换到全局方向\r\n            MathTool.Vector3Tool.TransformNormalFromFloatsToRef(resultDirection.x, resultDirection.y, resultDirection.z, worldMatrix, resultDirection);\r\n        }\r\n        // var randX = BABYLON.Scalar.RandomRange(0, this.directionRandomizer);\r\n        // var randY = BABYLON.Scalar.RandomRange(0, this.directionRandomizer);\r\n        // var randZ = BABYLON.Scalar.RandomRange(0, this.directionRandomizer);\r\n        // direction.x += randX;\r\n        // direction.y += randY;\r\n        // direction.z += randZ;\r\n        // direction.normalize();\r\n    }\r\n    static startPositionFunction(config, worldMatrix, resultPosition, emissionLoop, emissionProgress, emissionIndex, emissionTotal, isLocal) {\r\n        let s = computeRadians(emissionLoop, emissionProgress, emissionIndex, emissionTotal, Math.PI * 2, config.arcValue, config.arcSpread, config.arcSpeed, config.arcMode);\r\n        var randRadius = config.radius - MathTool.ScalarTool.RandomRange(0, config.radius * config.radiusThickness);\r\n        var randX = randRadius * Math.cos(s);\r\n        var randY = randRadius * Math.sin(s);\r\n        var randZ = 0;\r\n        if (isLocal) {\r\n            resultPosition.x = randX;\r\n            resultPosition.y = randY;\r\n            resultPosition.z = randZ;\r\n        }\r\n        else {\r\n            MathTool.Vector3Tool.TransformCoordinatesFromFloatsToRef(randX, randY, randZ, worldMatrix, resultPosition);\r\n        }\r\n    }\r\n}\r\n","import { MathTool } from \"../math/math\";\r\nimport { computeRadians } from \"./config\";\r\nimport { EArcMode, EShapeEmitterDirectionMode, EShapeEmitterMode } from \"./mode\";\r\nexport class Cone {\r\n    static Config() {\r\n        return {\r\n            mode: EShapeEmitterMode.Cone,\r\n            radius: 1,\r\n            angle: Math.PI,\r\n            radiusThickness: 1,\r\n            baseHeight: 0,\r\n            height: 1,\r\n            heightRange: 0,\r\n            arcMode: EArcMode.Random,\r\n            arcValue: Math.PI * 2,\r\n            arcSpread: 0,\r\n            arcSpeed: 1,\r\n            scale: [1, 1, 1],\r\n            directionMode: EShapeEmitterDirectionMode.Unity,\r\n            emitFromSpawnPointOnly: false,\r\n            directionRandomizer: 0,\r\n        };\r\n    }\r\n    static MAX_Z = 999999999;\r\n    static computeDirection(config, worldMatrix, resultDirection, localPosition, isLocal) {\r\n        // 局部方向为 圆锥顶点指向局部点\r\n        resultDirection.copyFrom(localPosition).addInPlaceFromFloats(0, 0, config.baseHeight).normalize();\r\n        if (isLocal) {\r\n            //\r\n        }\r\n        else {\r\n            // MathTool.Vector3Tool.TransformCoordinatesFromFloatsToRef(resultDirection.x, resultDirection.y, resultDirection.z, worldMatrix, resultDirection);\r\n            // resultDirection.subtractToRef(worldMatrix.getTranslation(), resultDirection).normalize();\r\n            // 转换到全局方向\r\n            MathTool.Vector3Tool.TransformNormalFromFloatsToRef(resultDirection.x, resultDirection.y, resultDirection.z, worldMatrix, resultDirection);\r\n        }\r\n        // var randX = MathTool.ScalarTool.RandomRange(0, this.directionRandomizer);\r\n        // var randY = MathTool.ScalarTool.RandomRange(0, this.directionRandomizer);\r\n        // var randZ = MathTool.ScalarTool.RandomRange(0, this.directionRandomizer);\r\n        var randX = 0;\r\n        var randY = 0;\r\n        var randZ = 0;\r\n        resultDirection.x = resultDirection.x + randX;\r\n        resultDirection.y = resultDirection.y + randY;\r\n        resultDirection.z = resultDirection.z + randZ;\r\n        resultDirection.normalize();\r\n    }\r\n    static startPositionFunction(config, worldMatrix, resultPosition, emissionLoop, emissionProgress, emissionIndex, emissionTotal, isLocal) {\r\n        let s = computeRadians(emissionLoop, emissionProgress, emissionIndex, emissionTotal, Math.PI * 2, config.arcValue, config.arcSpread, config.arcSpeed, config.arcMode);\r\n        var h;\r\n        if (config.angle !== 0) {\r\n            config.baseHeight = config.radius / Math.tan(config.angle / 2);\r\n        }\r\n        else {\r\n            config.baseHeight = Cone.MAX_Z;\r\n        }\r\n        if (!config.emitFromSpawnPointOnly) {\r\n            h = MathTool.ScalarTool.RandomRange(0, config.heightRange);\r\n        }\r\n        else {\r\n            h = 0.0;\r\n        }\r\n        h = Math.max(0.00001, h);\r\n        var radius = config.radius - MathTool.ScalarTool.RandomRange(0, config.radius * config.radiusThickness);\r\n        if (config.baseHeight > 0) {\r\n            radius = radius * (h * config.height + config.baseHeight) / config.baseHeight;\r\n        }\r\n        var randX = 0;\r\n        var randZ = 0;\r\n        var randY = 0;\r\n        if (config.directionMode == EShapeEmitterDirectionMode.Unity) {\r\n            randX = radius * Math.sin(s);\r\n            randY = radius * Math.cos(s);\r\n            randZ = h * config.height;\r\n        }\r\n        else {\r\n            randX = radius * Math.sin(s);\r\n            randZ = radius * Math.cos(s);\r\n            randY = h * config.height;\r\n        }\r\n        if (isLocal) {\r\n            resultPosition.x = randX;\r\n            resultPosition.y = randY;\r\n            resultPosition.z = randZ;\r\n        }\r\n        else {\r\n            MathTool.Vector3Tool.TransformCoordinatesFromFloatsToRef(randX, randY, randZ, worldMatrix, resultPosition);\r\n        }\r\n    }\r\n}\r\n","import { MathTool } from \"../math/math\";\r\nimport { computeRadians } from \"./config\";\r\nimport { EArcMode, EShapeEmitterDirectionMode, EShapeEmitterMode } from \"./mode\";\r\nexport class Edge {\r\n    static Config() {\r\n        return {\r\n            mode: EShapeEmitterMode.Edge,\r\n            radius: 0,\r\n            angle: Math.PI,\r\n            radiusThickness: 1,\r\n            baseHeight: 0,\r\n            height: 1,\r\n            heightRange: 0,\r\n            arcMode: EArcMode.Random,\r\n            arcValue: 1.0,\r\n            arcSpread: 0,\r\n            arcSpeed: 1,\r\n            scale: [1, 1, 1],\r\n            directionMode: EShapeEmitterDirectionMode.Unity,\r\n            emitFromSpawnPointOnly: false,\r\n            directionRandomizer: 0,\r\n        };\r\n    }\r\n    static computeDirection(config, worldMatrix, resultDirection, localPosition, isLocal) {\r\n        // 局部方向固定\r\n        resultDirection.copyFromFloats(0, 1, 0);\r\n        // var randX = BABYLON.Scalar.RandomRange(0, this.directionRandomizer);\r\n        // var randY = BABYLON.Scalar.RandomRange(0, this.directionRandomizer);\r\n        // var randZ = BABYLON.Scalar.RandomRange(0, this.directionRandomizer);\r\n        // direction.x += randX;\r\n        // direction.y += randY;\r\n        // direction.z += randZ;\r\n        // direction.normalize();\r\n        if (isLocal) {\r\n            //\r\n        }\r\n        else {\r\n            MathTool.Vector3Tool.TransformNormalFromFloatsToRef(resultDirection.x, resultDirection.y, resultDirection.z, worldMatrix, resultDirection);\r\n        }\r\n    }\r\n    static startPositionFunction(config, worldMatrix, resultPosition, emissionLoop, emissionProgress, emissionIndex, emissionTotal, isLocal) {\r\n        let s = computeRadians(emissionLoop, emissionProgress, emissionIndex, emissionTotal, 1.0, config.arcValue, config.arcSpread, config.arcSpeed, config.arcMode);\r\n        var randX = config.radius * (s / config.arcValue * 2 - 1);\r\n        resultPosition.copyFromFloats(randX, 0, 0);\r\n        if (isLocal) {\r\n            //\r\n        }\r\n        else {\r\n            MathTool.Vector3Tool.TransformCoordinatesFromFloatsToRef(resultPosition.x, resultPosition.y, resultPosition.z, worldMatrix, resultPosition);\r\n        }\r\n    }\r\n}\r\n","import { MathTool } from \"../math/math\";\r\nimport { computeRadians } from \"./config\";\r\nimport { EArcMode, EShapeEmitterDirectionMode, EShapeEmitterMode } from \"./mode\";\r\nexport class Hemisphere {\r\n    static Config() {\r\n        return {\r\n            mode: EShapeEmitterMode.Hemisphere,\r\n            radius: 1,\r\n            angle: Math.PI,\r\n            radiusThickness: 1,\r\n            baseHeight: 0,\r\n            height: 1,\r\n            heightRange: 0,\r\n            arcMode: EArcMode.Random,\r\n            arcValue: Math.PI * 2,\r\n            arcSpread: 0,\r\n            arcSpeed: 1,\r\n            scale: [1, 1, 1],\r\n            directionMode: EShapeEmitterDirectionMode.Unity,\r\n            emitFromSpawnPointOnly: false,\r\n            directionRandomizer: 0,\r\n        };\r\n    }\r\n    static computeDirection(config, worldMatrix, resultDirection, localPosition, isLocal) {\r\n        // 局部方向为 局部原点指向 局部点\r\n        resultDirection.copyFrom(localPosition).normalize();\r\n        if (isLocal) {\r\n            //\r\n        }\r\n        else {\r\n            // 转换到全局方向\r\n            MathTool.Vector3Tool.TransformNormalFromFloatsToRef(resultDirection.x, resultDirection.y, resultDirection.z, worldMatrix, resultDirection);\r\n        }\r\n        var randX = MathTool.ScalarTool.RandomRange(0, config.directionRandomizer || 0);\r\n        var randY = MathTool.ScalarTool.RandomRange(0, config.directionRandomizer || 0);\r\n        var randZ = MathTool.ScalarTool.RandomRange(0, config.directionRandomizer || 0);\r\n        resultDirection.x += randX;\r\n        resultDirection.y += randY;\r\n        resultDirection.z += randZ;\r\n        resultDirection.normalize();\r\n        // if (isLocal) {\r\n        //     //\r\n        // }\r\n        // else {\r\n        //     MathTool.Vector3Tool.TransformNormalFromFloatsToRef(resultDirection.x, resultDirection.y, resultDirection.z, worldMatrix, resultDirection);\r\n        // }\r\n    }\r\n    static startPositionFunction(config, worldMatrix, resultPosition, emissionLoop, emissionProgress, emissionIndex, emissionTotal, isLocal) {\r\n        let s = computeRadians(emissionLoop, emissionProgress, emissionIndex, emissionTotal, Math.PI * 2, config.arcValue, config.arcSpread, config.arcSpeed, config.arcMode);\r\n        var range = MathTool.ScalarTool.RandomRange(0, config.radiusThickness);\r\n        var randRadius = config.radius - config.radius * range * range;\r\n        var v = MathTool.ScalarTool.RandomRange(0, 1.0);\r\n        var phi = s;\r\n        var theta = Math.acos(2 * v - 1);\r\n        var randX = randRadius * Math.cos(phi) * Math.sin(theta);\r\n        var randZ = Math.abs(randRadius * v);\r\n        var randY = randRadius * Math.sin(phi) * Math.sin(theta);\r\n        if (isLocal) {\r\n            resultPosition.copyFromFloats(randX, randY, randZ);\r\n        }\r\n        else {\r\n            MathTool.Vector3Tool.TransformCoordinatesFromFloatsToRef(randX, randY, randZ, worldMatrix, resultPosition);\r\n        }\r\n    }\r\n}\r\n","import { MathTool } from \"../math/math\";\r\nimport { EArcMode, EShapeEmitterDirectionMode, EShapeEmitterMode } from \"./mode\";\r\nexport class Point {\r\n    static Config() {\r\n        return {\r\n            mode: EShapeEmitterMode.Point,\r\n            radius: 1,\r\n            angle: Math.PI,\r\n            radiusThickness: 1,\r\n            baseHeight: 0,\r\n            height: 1,\r\n            heightRange: 0,\r\n            arcMode: EArcMode.Random,\r\n            arcValue: Math.PI * 2,\r\n            arcSpread: 0,\r\n            arcSpeed: 1,\r\n            scale: [1, 1, 1],\r\n            directionMode: EShapeEmitterDirectionMode.Unity,\r\n            emitFromSpawnPointOnly: false,\r\n            directionRandomizer: 0,\r\n        };\r\n    }\r\n    static computeDirection(config, worldMatrix, resultDirection, localPosition, isLocal) {\r\n        // 局部方向固定\r\n        if (isLocal) {\r\n            resultDirection.copyFromFloats(0, 0, 1);\r\n        }\r\n        else {\r\n            MathTool.Vector3Tool.TransformNormalFromFloatsToRef(0, 0, 1, worldMatrix, resultDirection);\r\n        }\r\n    }\r\n    static startPositionFunction(config, worldMatrix, resultPosition, emissionLoop, emissionProgress, emissionIndex, emissionTotal, isLocal) {\r\n        if (isLocal) {\r\n            resultPosition.copyFromFloats(0, 0, 0);\r\n        }\r\n        else {\r\n            worldMatrix.getTranslationToRef(resultPosition);\r\n        }\r\n    }\r\n}\r\n","import { MathTool } from \"../math/math\";\r\nimport { EArcMode, EShapeEmitterDirectionMode, EShapeEmitterMode } from \"./mode\";\r\nexport class Rectangle {\r\n    static Config() {\r\n        return {\r\n            mode: EShapeEmitterMode.Rectangle,\r\n            radius: 1,\r\n            angle: Math.PI,\r\n            radiusThickness: 1,\r\n            baseHeight: 0,\r\n            height: 1,\r\n            heightRange: 0,\r\n            arcMode: EArcMode.Random,\r\n            arcValue: Math.PI * 2,\r\n            arcSpread: 0,\r\n            arcSpeed: 1,\r\n            scale: [1, 1, 1],\r\n            directionMode: EShapeEmitterDirectionMode.Unity,\r\n            emitFromSpawnPointOnly: false,\r\n            directionRandomizer: 0,\r\n        };\r\n    }\r\n    static computeDirection(config, worldMatrix, resultDirection, localPosition, isLocal) {\r\n        // 局部方向固定\r\n        if (isLocal) {\r\n            resultDirection.copyFromFloats(0, 0, 1);\r\n        }\r\n        else {\r\n            MathTool.Vector3Tool.TransformNormalFromFloatsToRef(0, 0, 1, worldMatrix, resultDirection);\r\n        }\r\n    }\r\n    static startPositionFunction(config, worldMatrix, resultPosition, emissionLoop, emissionProgress, emissionIndex, emissionTotal, isLocal) {\r\n        var randX = MathTool.ScalarTool.RandomRange(-0.5, 0.5);\r\n        var randY = MathTool.ScalarTool.RandomRange(-0.5, 0.5);\r\n        var randZ = 0;\r\n        if (isLocal) {\r\n            resultPosition.copyFromFloats(randX * config.scale[0], randY * config.scale[1], randZ * config.scale[2]);\r\n        }\r\n        else {\r\n            MathTool.Vector3Tool.TransformCoordinatesFromFloatsToRef(randX * config.scale[0], randY * config.scale[1], randZ * config.scale[2], worldMatrix, resultPosition);\r\n        }\r\n    }\r\n}\r\n","import { MathTool } from \"../math/math\";\r\nimport { EArcMode, EShapeEmitterDirectionMode, EShapeEmitterMode } from \"./mode\";\r\nexport class Sphere {\r\n    static Config() {\r\n        return {\r\n            mode: EShapeEmitterMode.Sphere,\r\n            radius: 1,\r\n            angle: Math.PI,\r\n            radiusThickness: 1,\r\n            baseHeight: 0,\r\n            height: 1,\r\n            heightRange: 0,\r\n            arcMode: EArcMode.Random,\r\n            arcValue: Math.PI * 2,\r\n            arcSpread: 0,\r\n            arcSpeed: 1,\r\n            scale: [1, 1, 1],\r\n            directionMode: EShapeEmitterDirectionMode.Unity,\r\n            emitFromSpawnPointOnly: false,\r\n            directionRandomizer: 0,\r\n        };\r\n    }\r\n    static computeDirection(config, worldMatrix, resultDirection, localPosition, isLocal) {\r\n        // 局部方向为 局部原点指向 局部点\r\n        resultDirection.copyFrom(localPosition).normalize();\r\n        if (isLocal) {\r\n            //\r\n        }\r\n        else {\r\n            MathTool.Vector3Tool.TransformNormalFromFloatsToRef(resultDirection.x, resultDirection.y, resultDirection.z, worldMatrix, resultDirection);\r\n        }\r\n    }\r\n    static startPositionFunction(config, worldMatrix, resultPosition, emissionLoop, emissionProgress, emissionIndex, emissionTotal, isLocal) {\r\n        var randX = MathTool.ScalarTool.RandomRange(-0.5, 0.5);\r\n        var randY = MathTool.ScalarTool.RandomRange(-0.5, 0.5);\r\n        var randZ = 0;\r\n        if (isLocal) {\r\n            resultPosition.copyFromFloats(randX * config.scale[0], randY * config.scale[1], randZ * config.scale[2]);\r\n        }\r\n        else {\r\n            MathTool.Vector3Tool.TransformCoordinatesFromFloatsToRef(randX * config.scale[0], randY * config.scale[1], randZ * config.scale[2], worldMatrix, resultPosition);\r\n        }\r\n    }\r\n}\r\n","import { Box } from \"./box\";\r\nimport { Circle } from \"./circle\";\r\nimport { Cone } from \"./cone\";\r\nimport { Edge } from \"./edge\";\r\nimport { Hemisphere } from \"./hemisphere\";\r\nimport { EShapeEmitterMode } from \"./mode\";\r\nimport { Point } from \"./point\";\r\nimport { Rectangle } from \"./rectangle\";\r\nimport { Sphere } from \"./sphere\";\r\nexport class ShapeEmitterTool {\r\n    /**\r\n     * Called by the particle System when the direction is computed for the created particle.\r\n     */\r\n    static startDirectionFunction(config, worldMatrix, directionToUpdate, localPosition, isLocal) {\r\n        switch (config.mode) {\r\n            case (EShapeEmitterMode.Box): {\r\n                Box.computeDirection(config, worldMatrix, directionToUpdate, localPosition, isLocal);\r\n                break;\r\n            }\r\n            case (EShapeEmitterMode.Cone): {\r\n                Cone.computeDirection(config, worldMatrix, directionToUpdate, localPosition, isLocal);\r\n                break;\r\n            }\r\n            case (EShapeEmitterMode.Hemisphere): {\r\n                Hemisphere.computeDirection(config, worldMatrix, directionToUpdate, localPosition, isLocal);\r\n                break;\r\n            }\r\n            case (EShapeEmitterMode.Sphere): {\r\n                Sphere.computeDirection(config, worldMatrix, directionToUpdate, localPosition, isLocal);\r\n                break;\r\n            }\r\n            case (EShapeEmitterMode.Edge): {\r\n                Edge.computeDirection(config, worldMatrix, directionToUpdate, localPosition, isLocal);\r\n                break;\r\n            }\r\n            case (EShapeEmitterMode.Circle): {\r\n                Circle.computeDirection(config, worldMatrix, directionToUpdate, localPosition, isLocal);\r\n                break;\r\n            }\r\n            case (EShapeEmitterMode.Rectangle): {\r\n                Rectangle.computeDirection(config, worldMatrix, directionToUpdate, localPosition, isLocal);\r\n                break;\r\n            }\r\n            default: {\r\n                Point.computeDirection(config, worldMatrix, directionToUpdate, localPosition, isLocal);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Called by the particle System when the position is computed for the created particle.\r\n     * @param config\r\n     * @param worldMatrix\r\n     * @param positionToUpdate\r\n     * @param localPosition\r\n     * @param emissionLoop 当前发射事件所属的发射循环数\r\n     * @param emissionProgress 当前发射事件的时间进度\r\n     * @param emissionIndex 目标在此次发射中的序号\r\n     * @param esmissionTotal 此次发射的总量\r\n     */\r\n    static startPositionFunction(config, worldMatrix, positionToUpdate, emissionLoop, emissionProgress, emissionIndex, emissionTotal, isLocal) {\r\n        switch (config.mode) {\r\n            case (EShapeEmitterMode.Box): {\r\n                Box.startPositionFunction(config, worldMatrix, positionToUpdate, emissionLoop, emissionProgress, emissionIndex, emissionTotal, isLocal);\r\n                break;\r\n            }\r\n            case (EShapeEmitterMode.Cone): {\r\n                Cone.startPositionFunction(config, worldMatrix, positionToUpdate, emissionLoop, emissionProgress, emissionIndex, emissionTotal, isLocal);\r\n                break;\r\n            }\r\n            case (EShapeEmitterMode.Hemisphere): {\r\n                Hemisphere.startPositionFunction(config, worldMatrix, positionToUpdate, emissionLoop, emissionProgress, emissionIndex, emissionTotal, isLocal);\r\n                break;\r\n            }\r\n            case (EShapeEmitterMode.Sphere): {\r\n                Sphere.startPositionFunction(config, worldMatrix, positionToUpdate, emissionLoop, emissionProgress, emissionIndex, emissionTotal, isLocal);\r\n                break;\r\n            }\r\n            case (EShapeEmitterMode.Edge): {\r\n                Edge.startPositionFunction(config, worldMatrix, positionToUpdate, emissionLoop, emissionProgress, emissionIndex, emissionTotal, isLocal);\r\n                break;\r\n            }\r\n            case (EShapeEmitterMode.Circle): {\r\n                Circle.startPositionFunction(config, worldMatrix, positionToUpdate, emissionLoop, emissionProgress, emissionIndex, emissionTotal, isLocal);\r\n                break;\r\n            }\r\n            case (EShapeEmitterMode.Rectangle): {\r\n                Rectangle.startPositionFunction(config, worldMatrix, positionToUpdate, emissionLoop, emissionProgress, emissionIndex, emissionTotal, isLocal);\r\n                break;\r\n            }\r\n            default: {\r\n                Point.startPositionFunction(config, worldMatrix, positionToUpdate, emissionLoop, emissionProgress, emissionIndex, emissionTotal, isLocal);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n","/**\r\n * 形状发射器类型\r\n */\r\nexport const TShapeTypeCone = 0;\r\nexport const TShapeTypeSphere = 1;\r\nexport const TShapeTypeBox = 2;\r\nexport const TShapeTypeCircle = 3;\r\nexport const TShapeTypeHemisphere = 4;\r\nexport const TShapeTypeEdge = 5;\r\nexport const TShapeTypeRectangle = 6;\r\n/**\r\n * ArcMode 类型\r\n */\r\nexport const TShapeArcModeRandom = 1;\r\nexport const TShapeArcModeLoop = 2;\r\nexport const TShapeArcModePingPong = 3;\r\nexport const TShapeArcModeBurstSpread = 4;\r\n/**\r\n * 曲线类型\r\n */\r\nexport const TInterpolateConstant = 1;\r\nexport const TInterpolateTwoConstants = 2;\r\nexport const TInterpolateCurve = 4;\r\nexport const TInterpolateTwoCurves = 8;\r\n/**\r\n * 渐变类型\r\n */\r\nexport const TInterpolateColor = 1;\r\nexport const TInterpolateTwoColors = 2;\r\nexport const TInterpolateGradient = 4;\r\nexport const TInterpolateTwoGradients = 8;\r\nexport const TInterpolateRandom = 16;\r\n/**\r\n * josn数据中 Emission 数据Index类型\r\n */\r\nexport const TEmissionIndexRate = 0;\r\nexport const TEmissionIndexBursts = 1;\r\n/**\r\n * 曲线参数类型\r\n */\r\nexport const TParamStartColor = 1;\r\nexport const TParamStartSpeed = 2;\r\nexport const TParamStartLifetime = 3;\r\nexport const TParamStartSize = 4;\r\nexport const TParamStartRotation = 5;\r\nexport const TParamGravity = 6;\r\nexport const TParamVelocityOverLifetime = 7;\r\nexport const TParamLimitVelocityOverLifetime = 8;\r\nexport const TParamForceOverLifetime = 9;\r\nexport const TParamColorOverLifetime = 10;\r\nexport const TParamSizeOverLifetime = 11;\r\nexport const TParamRotationOverLifetime = 12;\r\nexport const TParamTextureSheet = 13;\r\n/**\r\n * 默认数据配置\r\n */\r\nexport const DefaultValue = {\r\n    duration: 5,\r\n    startSpeed: 1,\r\n    startLifetime: 2,\r\n    textureSheetFrame: 0,\r\n    startSize: [1, 1, 1],\r\n    startRotation: [0, 0, 0],\r\n    startColor: [1, 1, 1, 1],\r\n    gravity: [0, 0, 0],\r\n    velocityOverLifetime: [0, 0, 0],\r\n    limitVelocityOverLifetime: [999999, 999999, 999999],\r\n    limitVelocityOverLifetimeDampen: 0,\r\n    forceOverLifetime: [0, 0, 0],\r\n    colorOverLifetime: [1, 1, 1, 1],\r\n    sizeOverLifetime: [1, 1, 1],\r\n    rotationOverLifetime: [0, 0, 0]\r\n};\r\n/**\r\n * 曲线插值模式\r\n */\r\nexport var EInterpolationCurveMode;\r\n(function (EInterpolationCurveMode) {\r\n    /**\r\n     * 静态数值\r\n     */\r\n    EInterpolationCurveMode[EInterpolationCurveMode[\"Constant\"] = TInterpolateConstant] = \"Constant\";\r\n    /**\r\n     * 静态数值随机 - XYZ 随机值相同\r\n     */\r\n    EInterpolationCurveMode[EInterpolationCurveMode[\"TwoConstants\"] = TInterpolateTwoConstants] = \"TwoConstants\";\r\n    /**\r\n     * 曲线插值\r\n     */\r\n    EInterpolationCurveMode[EInterpolationCurveMode[\"Curve\"] = TInterpolateCurve] = \"Curve\";\r\n    /**\r\n     * 曲线插值\r\n     */\r\n    EInterpolationCurveMode[EInterpolationCurveMode[\"TwoCurves\"] = TInterpolateTwoCurves] = \"TwoCurves\";\r\n})(EInterpolationCurveMode || (EInterpolationCurveMode = {}));\r\n/**\r\n * 渐变插值模式\r\n */\r\nexport var EInterpolationGradienMode;\r\n(function (EInterpolationGradienMode) {\r\n    /**\r\n     * 静态数值\r\n     */\r\n    EInterpolationGradienMode[EInterpolationGradienMode[\"Color\"] = TInterpolateColor] = \"Color\";\r\n    /**\r\n     * 静态数值随机 - XYZ 随机值相同\r\n     */\r\n    EInterpolationGradienMode[EInterpolationGradienMode[\"TwoColors\"] = TInterpolateTwoColors] = \"TwoColors\";\r\n    /**\r\n     * 曲线插值\r\n     */\r\n    EInterpolationGradienMode[EInterpolationGradienMode[\"Gradient\"] = TInterpolateGradient] = \"Gradient\";\r\n    /**\r\n     * 曲线插值\r\n     */\r\n    EInterpolationGradienMode[EInterpolationGradienMode[\"TwoGradients\"] = TInterpolateTwoGradients] = \"TwoGradients\";\r\n    /**\r\n     * 曲线插值\r\n     */\r\n    EInterpolationGradienMode[EInterpolationGradienMode[\"Random\"] = TInterpolateRandom] = \"Random\";\r\n})(EInterpolationGradienMode || (EInterpolationGradienMode = {}));\r\n","import { ShapeEmitterTool } from \"./emitter/shape_emitter\";\r\nimport { EInterpolationCurveMode } from \"./iparticle_system_config\";\r\nimport { directionToQuaternion, MathTool } from \"./math/math\";\r\nexport var EMeshParticleSpaceMode;\r\n(function (EMeshParticleSpaceMode) {\r\n    EMeshParticleSpaceMode[EMeshParticleSpaceMode[\"Local\"] = 0] = \"Local\";\r\n    /**\r\n     * 发射在世界空间时, 父级尽量不要有旋转动画, 因为 动画 与 粒子动画的衔接有误差，无法完美适配\r\n     */\r\n    EMeshParticleSpaceMode[EMeshParticleSpaceMode[\"World\"] = 1] = \"World\";\r\n})(EMeshParticleSpaceMode || (EMeshParticleSpaceMode = {}));\r\nexport var EMeshParticleScaleMode;\r\n(function (EMeshParticleScaleMode) {\r\n    EMeshParticleScaleMode[EMeshParticleScaleMode[\"Hierarchy\"] = 0] = \"Hierarchy\";\r\n    EMeshParticleScaleMode[EMeshParticleScaleMode[\"Local\"] = 1] = \"Local\";\r\n    EMeshParticleScaleMode[EMeshParticleScaleMode[\"Shape\"] = 2] = \"Shape\";\r\n})(EMeshParticleScaleMode || (EMeshParticleScaleMode = {}));\r\nexport var ERenderAlignment;\r\n(function (ERenderAlignment) {\r\n    ERenderAlignment[ERenderAlignment[\"View\"] = 0] = \"View\";\r\n    ERenderAlignment[ERenderAlignment[\"World\"] = 1] = \"World\";\r\n    /**\r\n     * Local 无需额外适配\r\n     */\r\n    ERenderAlignment[ERenderAlignment[\"Local\"] = 2] = \"Local\";\r\n})(ERenderAlignment || (ERenderAlignment = {}));\r\n/**\r\n * 对接 Unity ParticleSystem Mesh Mode\r\n */\r\nexport class ParticleSystemTool {\r\n    static TempVector3_0;\r\n    static TempVector3_1;\r\n    static TempQuaternion_0;\r\n    static TempMatrix_1;\r\n    static sqrt3 = Math.sqrt(3);\r\n    static init() {\r\n        ParticleSystemTool.TempVector3_0 = MathTool.Vector3Tool.Zero();\r\n        ParticleSystemTool.TempVector3_1 = MathTool.Vector3Tool.Zero();\r\n        ParticleSystemTool.TempQuaternion_0 = MathTool.QuaternionTool.Zero();\r\n        ParticleSystemTool.TempMatrix_1 = MathTool.Matrix4Tool.Zero();\r\n        ParticleSystemTool.sqrt3 = Math.sqrt(3);\r\n    }\r\n    /**\r\n     * 最大粒子数\r\n     */\r\n    maxParticles = 100;\r\n    /**\r\n     * 是否循环\r\n     */\r\n    looping = true;\r\n    /**\r\n     * 是否预热\r\n     */\r\n    prewarm = false;\r\n    /**\r\n     * 粒子系统发射持续时间\r\n     */\r\n    duration = 5.0;\r\n    _loopCount = 0;\r\n    /**\r\n     * 延时时间 - 毫秒\r\n     */\r\n    startDelay = 0;\r\n    emitterShape;\r\n    /**\r\n     * 一次发射循环的时间 - 毫秒\r\n     */\r\n    emissionTime = 1000;\r\n    /**\r\n     * 当前已循环次数\r\n     */\r\n    emissionLoop = 0;\r\n    /**\r\n     * 当前发射循环的进度\r\n     */\r\n    emissionProgress = 0;\r\n    /**\r\n     * 每秒发射的粒子数目\r\n     */\r\n    rateOverTime = 10;\r\n    /**\r\n     * 指定时间点 开始 持续 指定时间内 发射指定数目\r\n     * [开始时间, 发射数目, 循环次数, 间隔]\r\n     * @tip 需要按 开始时间从小到大排序\r\n     */\r\n    bursts = [];\r\n    _burstsLoopCount = [];\r\n    /**\r\n     * 发射空间\r\n     * * Local - 本地: 发射开始时的方向受父级影响, 发射后的位置也受父级影响\r\n     * * World - 世界空间: 发射开始时的方向受父级影响, 发射后的位置不再受父级影响\r\n     */\r\n    simulationSpace = EMeshParticleSpaceMode.Local;\r\n    scalingSpace = EMeshParticleScaleMode.Hierarchy;\r\n    renderAlignment = ERenderAlignment.Local;\r\n    startLifetimeInterpolation;\r\n    startSpeedInterpolation;\r\n    startSizeInterpolation;\r\n    startRotationInterpolation;\r\n    startColorInterpolation;\r\n    gravityInterpolation;\r\n    /**\r\n     * 位移速度\r\n     * @tip 默认模式 - ConstantsUnite - XYZ 共用一个随机数\r\n     * @tip 为 Constants | ConstantsUnite 模式应用插值时, 仅创建时使用, 意义为: 创建时速度基础上附加速度\r\n     * @tip 为 Curves 模式时, 运行过程中使用, 意义为: 创建时速度基础上附加速度 - 每次循环累加 此次循环 与 上次循环 速度值的差值\r\n     */\r\n    velocityOverLifetimeInterpolation;\r\n    velocityOverLifetimeIsLocal = true;\r\n    limitVelocityOverLifetimeDampen = 0;\r\n    limitVelocityOverLifetimeInterpolation;\r\n    forceOverLifetimeInterpolation;\r\n    forceSpaceIsLocal = true;\r\n    colorOverLifetimeInterpolation;\r\n    /**\r\n     * 缩放\r\n     * @tip 默认模式 - ConstantsUnite - XYZ 共用一个随机数\r\n     * @tip 为 Constants | ConstantsUnite 模式应用插值时, 仅创建时使用, 意义为: 仅对创建时大小的影响倍数\r\n     * @tip 为 Curves 模式时, 运行过程中使用, 意义为: 创建时大小的影响倍数\r\n     */\r\n    sizeOverLifetimeInterpolation;\r\n    /**\r\n     * 旋转\r\n     * @tip 默认模式 - ConstantsUnite - XYZ 共用一个随机数\r\n     * @tip Unity 中单一 Angle 对应 只处理 Y 轴\r\n     * @tip 与 Unity 编辑时不同, 此处单位为 弧度\r\n     * @tip 为 Constants | ConstantsUnite 模式时, 仅创建时使用, 意义为: 每秒旋转速度\r\n     * @tip 为 Curves 模式时, 运行过程中使用, 意义为: 每秒旋转速度\r\n     */\r\n    rotationOverLifetimeInterpolation;\r\n    /**\r\n     * Texture Sheet Animation\r\n     */\r\n    textureSheetInterpolation;\r\n    // 局部空间数据 - 每粒子\r\n    /**\r\n     * 已持续生命\r\n     */\r\n    _ageList = [];\r\n    _ratioList = [];\r\n    /**\r\n     * 生命限制\r\n     */\r\n    _lifeTimeList = [];\r\n    _activeTimeList = [];\r\n    _startGravityList = [];\r\n    _startLocalPositionList = [];\r\n    _startPositionList = [];\r\n    _startSizeList = [];\r\n    _startColorList = [];\r\n    _realtimeLocalPositionList = [];\r\n    _realtimeRotationList = [];\r\n    _realtimeSizeList = [];\r\n    _realtimeColorList = [];\r\n    _velocityLastList = [];\r\n    _limitVelocityFlagList = [];\r\n    _limitVelocityList = [];\r\n    _realtimeForceList = [];\r\n    _startDirectionList = [];\r\n    _realtimeVelocityDirectionList = [];\r\n    _activeIdList = [];\r\n    _activeFlagList = [];\r\n    _waitIdList = [];\r\n    _startWorldMatrixList = [];\r\n    _startWorldRIMList = [];\r\n    _realStartWMList = [];\r\n    _uvSheetList = [];\r\n    enableForceOverLifeTime = false;\r\n    enableVelocityOverLifeTime = false;\r\n    enableLimitVelocityOverLifeTime = false;\r\n    enableColorOverLifeTime = false;\r\n    enableSizeOverLifeTime = false;\r\n    enableRotationOverLifeTime = false;\r\n    _particleSystemAge = 0;\r\n    _tempVector3 = MathTool.Vector3Tool.Zero();\r\n    _tempVector4 = MathTool.Vector4Tool.Zero();\r\n    _lastTime = 0;\r\n    _deltaTime = 0;\r\n    _lastCreateTime = 0;\r\n    _isPlaying = false;\r\n    _isComputeable = false;\r\n    getParentWorldMatrix = MathTool.Matrix4Tool.Identity;\r\n    getWorldMatrix = MathTool.Matrix4Tool.Identity;\r\n    getLocalMatrix = MathTool.Matrix4Tool.Identity;\r\n    getCameraPosition = MathTool.Vector3Tool.Zero;\r\n    _isDisposed = false;\r\n    dispose() {\r\n        if (this._isDisposed) {\r\n            return;\r\n        }\r\n        this.stop();\r\n        this._mpMatrixList = undefined;\r\n        this._mpColorData = undefined;\r\n        this.startLifetimeInterpolation && this.startLifetimeInterpolation.dispose();\r\n        this.startSpeedInterpolation && this.startSpeedInterpolation.dispose();\r\n        this.startSizeInterpolation && this.startSizeInterpolation.dispose();\r\n        this.startRotationInterpolation && this.startRotationInterpolation.dispose();\r\n        this.startColorInterpolation && this.startColorInterpolation.dispose();\r\n        this.gravityInterpolation && this.gravityInterpolation.dispose();\r\n        this.velocityOverLifetimeInterpolation && this.velocityOverLifetimeInterpolation.dispose();\r\n        this.limitVelocityOverLifetimeInterpolation && this.limitVelocityOverLifetimeInterpolation.dispose();\r\n        this.forceOverLifetimeInterpolation && this.forceOverLifetimeInterpolation.dispose();\r\n        this.colorOverLifetimeInterpolation && this.colorOverLifetimeInterpolation.dispose();\r\n        this.sizeOverLifetimeInterpolation && this.sizeOverLifetimeInterpolation.dispose();\r\n        this.rotationOverLifetimeInterpolation && this.rotationOverLifetimeInterpolation.dispose();\r\n        this.bursts.length = 0, // this.bursts                 = undefined;\r\n            this._activeIdList.length = 0, // this._activeIdList          = undefined;\r\n            this._activeFlagList.length = 0, // this._activeFlagList        = undefined;\r\n            this._waitIdList.length = 0, // this._waitIdList            = undefined;\r\n            this._ageList.length = 0, // this._ageList               = undefined;\r\n            this._ratioList.length = 0, // this._ratioList             = undefined;\r\n            this._lifeTimeList.length = 0, // this._lifeTimeList          = undefined;\r\n            this._activeTimeList.length = 0, // this._activeTimeList        = undefined;\r\n            this._startGravityList.length = 0, // this._startGravityList      = undefined;\r\n            this._startLocalPositionList.length = 0, // this._startLocalPositionList= undefined;\r\n            this._startPositionList.length = 0, // this._startPositionList     = undefined;\r\n            this._startSizeList.length = 0, // this._startSizeList         = undefined;\r\n            this._startColorList.length = 0, // this._startColorList        = undefined;\r\n            this._realtimeLocalPositionList.length = 0, // this._localPositionList     = undefined;\r\n            this._realtimeRotationList.length = 0, // this._rotationList          = undefined;\r\n            this._realtimeSizeList.length = 0, // this._sizeList              = undefined;\r\n            this._realtimeColorList.length = 0, // this._colorList             = undefined;\r\n            this._velocityLastList.length = 0, // this._velocityLastList      = undefined;\r\n            this._limitVelocityFlagList.length = 0, // this._limitVelocityFlagList = undefined;\r\n            this._limitVelocityList.length = 0, // this._limitVelocityList = undefined;\r\n            this._realtimeForceList.length = 0, // this._forceList             = undefined;\r\n            this._startDirectionList.length = 0, // this._startDirectionList    = undefined;\r\n            this._realtimeVelocityDirectionList.length = 0;\r\n        this._startWorldMatrixList.length = 0, // this._startWorldMatrixList  = undefined;\r\n            this._startWorldRIMList.length = 0, // this._startWorldRIMList     = undefined;\r\n            this._realStartWMList.length = 0;\r\n        this._uvSheetList.length = 0,\r\n            this._isDisposed = true;\r\n        return;\r\n    }\r\n    _mpMatrixList;\r\n    _mpColorData;\r\n    get mpMatrixList() {\r\n        return this._mpMatrixList;\r\n    }\r\n    get mpColorData() {\r\n        return this._mpColorData;\r\n    }\r\n    _maxId = 0;\r\n    build() {\r\n        this._mpMatrixList = new Float32Array(16 * this.maxParticles);\r\n        this._mpColorData = new Float32Array(4 * this.maxParticles);\r\n        // this._mpUVSheetData = new Float32Array(4 * this.maxParticles);\r\n        for (let i = this._maxId; i < this.maxParticles; i++) {\r\n            this._waitIdList.push(i);\r\n            this._activeFlagList[i] = 0;\r\n            this._ageList[i] = 0;\r\n            this._ratioList[i] = 0;\r\n            this._lifeTimeList[i] = Number.MAX_VALUE;\r\n            this._activeTimeList[i] = 0;\r\n            this._startGravityList[i] = MathTool.Vector3Tool.Zero();\r\n            this._startLocalPositionList[i] = MathTool.Vector3Tool.Zero();\r\n            this._startPositionList[i] = MathTool.Vector3Tool.Zero();\r\n            this._startSizeList[i] = MathTool.Vector3Tool.One();\r\n            this._startColorList[i] = MathTool.Vector4Tool.Zero();\r\n            this._realtimeLocalPositionList[i] = MathTool.Vector3Tool.Zero();\r\n            this._realtimeRotationList[i] = [0, 0, 0];\r\n            this._realtimeSizeList[i] = MathTool.Vector3Tool.One();\r\n            this._realtimeColorList[i] = MathTool.Vector4Tool.One();\r\n            this._velocityLastList[i] = MathTool.Vector3Tool.Zero();\r\n            this._limitVelocityFlagList[i] = false;\r\n            this._limitVelocityList[i] = 0;\r\n            this._realtimeForceList[i] = MathTool.Vector3Tool.Zero();\r\n            this._startDirectionList[i] = MathTool.Vector3Tool.Zero();\r\n            this._realtimeVelocityDirectionList[i] = MathTool.Vector3Tool.Zero();\r\n            this._startWorldMatrixList[i] = MathTool.Matrix4Tool.Identity();\r\n            this._startWorldRIMList[i] = MathTool.Matrix4Tool.Identity();\r\n            this._realStartWMList[i] = MathTool.Matrix4Tool.Identity();\r\n            this._uvSheetList[i] = [1, 1, 0, 0];\r\n        }\r\n        this._maxId = this.maxParticles;\r\n    }\r\n    start() {\r\n        if (!this._isPlaying) {\r\n            if (this.startDelay > 0 && !this.prewarm) {\r\n                setTimeout(this._startCall, this.startDelay);\r\n            }\r\n            else {\r\n                this._startCall();\r\n            }\r\n        }\r\n        this._isPlaying = true;\r\n    }\r\n    _startCall = () => {\r\n        this._isComputeable = true;\r\n        this._particleSystemAge = 0;\r\n        this._lastTime = Date.now();\r\n        this._lastCreateTime = this._lastTime;\r\n        if (this.prewarm) {\r\n            for (let i = this.rateOverTime - 1; i >= 0; i--) {\r\n                this._lastTime -= i * this.duration / this.rateOverTime;\r\n                this.varCompute();\r\n            }\r\n        }\r\n    };\r\n    stop() {\r\n        this._isComputeable = false;\r\n        if (!this._isDisposed) {\r\n            this._stop();\r\n        }\r\n        this._isPlaying = false;\r\n    }\r\n    _stop() {\r\n        if (this._isPlaying) {\r\n            this._burstsLoopCount.length = 0;\r\n            const count = this._activeIdList.length;\r\n            for (let i = count - 1; i >= 0; i--) {\r\n                const index = this._activeIdList.pop();\r\n                this._activeFlagList[index] = 0;\r\n                this._waitIdList.push(index);\r\n            }\r\n        }\r\n        this._isPlaying = false;\r\n    }\r\n    mpUpdate() {\r\n        return this._update();\r\n    }\r\n    _mpTempMatrix = MathTool.Matrix4Tool.Identity();\r\n    _cameraInvertMatrix = MathTool.Matrix4Tool.Identity();\r\n    _startWorldRIM = MathTool.Matrix4Tool.Identity();\r\n    _startWorldP = MathTool.Vector3Tool.Zero();\r\n    _startWorldRM = MathTool.Matrix4Tool.Identity();\r\n    _startWorldS = MathTool.Vector3Tool.Zero();\r\n    _startLocalS = MathTool.Vector3Tool.Zero();\r\n    _start_parent_m = MathTool.Matrix4Tool.Identity();\r\n    _start_wm = MathTool.Matrix4Tool.Identity();\r\n    _start_local_m = MathTool.Matrix4Tool.Identity();\r\n    _start_p_s = MathTool.Vector3Tool.Zero();\r\n    _start_p_r = MathTool.QuaternionTool.Identity();\r\n    _start_p_p = MathTool.Vector3Tool.Zero();\r\n    _start_l_s = MathTool.Vector3Tool.Zero();\r\n    _start_l_r = MathTool.QuaternionTool.Identity();\r\n    _start_l_p = MathTool.Vector3Tool.Zero();\r\n    _maxLifetimeOverage = 0;\r\n    get maxLifetimeOverage() {\r\n        return this._maxLifetimeOverage;\r\n    }\r\n    _formatStartInfo(parentWM, localWM, resultStartMatrix) {\r\n        // 分解出 TRS\r\n        if (parentWM) {\r\n            parentWM.decompose(this._start_p_s, this._start_p_r, this._start_p_p);\r\n        }\r\n        else {\r\n            this._start_p_p.x = 0, this._start_p_p.y = 0, this._start_p_p.z = 0;\r\n            this._start_p_r.x = 0, this._start_p_r.y = 0, this._start_p_r.z = 0, this._start_p_r.w = 1;\r\n            this._start_p_s.x = 1, this._start_p_s.y = 1, this._start_p_s.z = 1;\r\n        }\r\n        localWM.decompose(this._start_l_s, this._start_l_r, this._start_l_p);\r\n        if (this.renderAlignment == ERenderAlignment.View) {\r\n            this._start_p_r.copyFromFloats(0, 0, 0, 1);\r\n            this._start_l_r.copyFromFloats(0, 0, 0, 1);\r\n        }\r\n        // 忽略粒子节点上的本地旋转 - 仅发射后的位移受此影响\r\n        else if (this.renderAlignment == ERenderAlignment.World) {\r\n            this._start_l_r.copyFromFloats(0, 0, 0, 1);\r\n        }\r\n        else {\r\n            //\r\n        }\r\n        if (this.scalingSpace == EMeshParticleScaleMode.Hierarchy) {\r\n            //\r\n        }\r\n        else if (this.scalingSpace == EMeshParticleScaleMode.Local) {\r\n            this._start_p_s.copyFromFloats(1, 1, 1);\r\n        }\r\n        else {\r\n            this._start_p_s.copyFromFloats(1, 1, 1);\r\n            this._start_l_s.copyFromFloats(1, 1, 1);\r\n        }\r\n        MathTool.Matrix4Tool.ComposeToRef(this._start_p_s, this._start_p_r, this._start_p_p, resultStartMatrix);\r\n        MathTool.Matrix4Tool.ComposeToRef(this._start_l_s, this._start_l_r, this._start_l_p, ParticleSystemTool.TempMatrix_1);\r\n        ParticleSystemTool.TempMatrix_1.multiplyToRef(resultStartMatrix, resultStartMatrix);\r\n    }\r\n    _update() {\r\n        if (!this._mpColorData || !this._mpMatrixList) {\r\n            return 0;\r\n        }\r\n        const camraGlobalPos = this.getCameraPosition();\r\n        let lookCameraDirection = camraGlobalPos.scale(-1);\r\n        this._start_parent_m = this.getParentWorldMatrix();\r\n        this._start_local_m = this.getLocalMatrix();\r\n        let _start_w_m = this.getWorldMatrix().clone();\r\n        let tempStartMatrix = MathTool.Matrix4Tool.Identity();\r\n        this._formatStartInfo(this._start_parent_m, this._start_local_m, tempStartMatrix);\r\n        let realStartMatrix = MathTool.Matrix4Tool.Identity();\r\n        let vec3_zero = MathTool.Vector3Tool.Zero();\r\n        let activeCount = 0;\r\n        const len = this._activeFlagList.length;\r\n        for (let i = 0; i < len; i++) {\r\n            if (this._activeFlagList[i] != 1) {\r\n                continue;\r\n            }\r\n            const index = i;\r\n            const _startLocalPos = this._startLocalPositionList[index];\r\n            const _localPosition = this._realtimeLocalPositionList[index];\r\n            const _rotation = this._realtimeRotationList[index];\r\n            const _scaling = this._realtimeSizeList[index];\r\n            const _color = this._realtimeColorList[index];\r\n            const _uvSheet = this._uvSheetList[index];\r\n            const ii = activeCount * 4;\r\n            /**\r\n             * 仅 Pi/Simple 导出为 带纹理动画的粒子\r\n             */\r\n            this._mpColorData[ii + 0] = _color.x; // + _uvSheet[0] * 10;\r\n            this._mpColorData[ii + 1] = _color.y; // + _uvSheet[1] * 10;\r\n            this._mpColorData[ii + 2] = _color.z; // + _uvSheet[2] * 10;\r\n            this._mpColorData[ii + 3] = _color.w; // + _uvSheet[3] * 10;\r\n            if (this.simulationSpace == EMeshParticleSpaceMode.Local) {\r\n                realStartMatrix.copyFrom(tempStartMatrix);\r\n            }\r\n            else {\r\n                // realStartMatrix.copyFrom(tempStartMatrix);\r\n                realStartMatrix.copyFrom(this._realStartWMList[index]);\r\n                _start_w_m.copyFrom(this._startWorldMatrixList[index]);\r\n            }\r\n            let localrotx = _rotation[0];\r\n            let localroty = _rotation[1];\r\n            let localrotz = _rotation[2];\r\n            MathTool.Vector3Tool.TransformCoordinatesFromFloatsToRef(_startLocalPos.x + _localPosition.x, _startLocalPos.y + _localPosition.y, _startLocalPos.z + _localPosition.z, _start_w_m, ParticleSystemTool.TempVector3_1);\r\n            if (this.renderAlignment == ERenderAlignment.View) {\r\n                realStartMatrix.decompose(ParticleSystemTool.TempVector3_0, undefined, undefined);\r\n                // lookCameraDirection.copyFrom(camraGlobalPos);\r\n                // lookCameraDirection.subtractInPlace(ParticleSystemTool.TempVector3_1);\r\n                _start_w_m.getTranslationToRef(lookCameraDirection);\r\n                lookCameraDirection.subtractInPlace(camraGlobalPos);\r\n                directionToQuaternion(lookCameraDirection, ParticleSystemTool.TempQuaternion_0);\r\n                // ParticleSystemTool.TempQuaternion_0.toRotationMatrix().\r\n                MathTool.Matrix4Tool.ComposeToRef(ParticleSystemTool.TempVector3_0, ParticleSystemTool.TempQuaternion_0, vec3_zero, realStartMatrix);\r\n            }\r\n            else {\r\n                realStartMatrix.setTranslationFromFloats(0, 0, 0);\r\n            }\r\n            // ParticleSystemTool.TempVector3_1.copyFromFloats(0, 0, 0);\r\n            MathTool.QuaternionTool.RotationYawPitchRollToRef(localroty, localrotx, localrotz, ParticleSystemTool.TempQuaternion_0);\r\n            MathTool.Matrix4Tool.ComposeToRef(_scaling, ParticleSystemTool.TempQuaternion_0, vec3_zero, ParticleSystemTool.TempMatrix_1);\r\n            ParticleSystemTool.TempMatrix_1.multiplyToRef(realStartMatrix, realStartMatrix);\r\n            realStartMatrix.setTranslation(ParticleSystemTool.TempVector3_1);\r\n            // const tempMatrix = this._mpTempMatrix;\r\n            realStartMatrix.copyToArray(this._mpMatrixList, activeCount * 16);\r\n            activeCount++;\r\n        }\r\n        return activeCount;\r\n    }\r\n    // 变量计算 - 异步计算\r\n    varCompute = () => {\r\n        if (this._isPlaying && this._isComputeable) {\r\n            const now = Date.now();\r\n            const delta = now - this._lastTime;\r\n            this._lastTime = now;\r\n            this._particleSystemAge += delta;\r\n            this._deltaTime = delta / 1000;\r\n            const scaleUpdateSpeed = Math.min(this._deltaTime, 50 / 1000);\r\n            const createDelta = now - this._lastCreateTime;\r\n            // this.emitRate / this.duration;\r\n            const tempLoop = Math.floor(this._particleSystemAge / this.duration);\r\n            let canNew = true;\r\n            let check = this._particleSystemAge - (this.prewarm ? this.duration : 0) - this.duration;\r\n            if (check > 0 && !this.looping) {\r\n                // 等待已发射粒子的消失\r\n                if (check > this._maxLifetimeOverage) {\r\n                    this.stop();\r\n                    return;\r\n                }\r\n                canNew = false;\r\n            }\r\n            else {\r\n                this._maxLifetimeOverage = 0;\r\n            }\r\n            const localTimeDiff = this._particleSystemAge % this.duration;\r\n            let burstCreateCount = 0;\r\n            this.emissionLoop = Math.floor(this._particleSystemAge / this.emissionTime);\r\n            this.emissionProgress = this._particleSystemAge % this.emissionTime / this.emissionTime;\r\n            const burstsCount = this.bursts.length;\r\n            // 新的一轮循环\r\n            if (this._loopCount < tempLoop) {\r\n                // 剩余 Bursts 全部激活\r\n                for (let i = 0; i < burstsCount; i++) {\r\n                    const [burstTime, burstCount, burstLoop, interval] = this.bursts[i];\r\n                    if (this.duration > burstTime) {\r\n                        if (!this._burstsLoopCount[i]) {\r\n                            this._burstsLoopCount[i] = 0;\r\n                        }\r\n                        const tempBurstLoop = Math.ceil((this.duration - burstTime) / interval);\r\n                        // 预估爆发次数 大于 已爆发次数\r\n                        if (tempBurstLoop > this._burstsLoopCount[i]) {\r\n                            // 可爆发次数 大于 已爆发次数\r\n                            while (burstLoop > this._burstsLoopCount[i]) {\r\n                                this._burstsLoopCount[i] += 1;\r\n                                burstCreateCount += burstCount;\r\n                            }\r\n                        }\r\n                    }\r\n                    this._burstsLoopCount[i] = 0;\r\n                }\r\n                this._loopCount = tempLoop;\r\n            }\r\n            for (let i = 0; i < burstsCount; i++) {\r\n                const [burstTime, burstCount, burstLoop, interval] = this.bursts[i];\r\n                if (localTimeDiff > burstTime) {\r\n                    if (!this._burstsLoopCount[i]) {\r\n                        this._burstsLoopCount[i] = 0;\r\n                    }\r\n                    const tempBurstLoop = Math.ceil((localTimeDiff - burstTime) / interval);\r\n                    // 预估爆发次数 大于 已爆发次数\r\n                    if (tempBurstLoop > this._burstsLoopCount[i]) {\r\n                        // 可爆发次数 大于 已爆发次数\r\n                        if (burstLoop > this._burstsLoopCount[i]) {\r\n                            this._burstsLoopCount[i] += 1;\r\n                            burstCreateCount += burstCount;\r\n                        }\r\n                    }\r\n                    // else {\r\n                    //     burstCreateCount += 0;\r\n                    // }\r\n                    // this._burstsLoopCount[i] += 1;\r\n                    // this._burstsIndex += 1;\r\n                    // if (this._burstsLoopCount[i] > burstLoop) {\r\n                    //     burstCreateCount += 0;\r\n                    // }\r\n                    // else {\r\n                    //     burstCreateCount += burstCount;\r\n                    // }\r\n                    // break;\r\n                }\r\n            }\r\n            let newCount = Math.round(createDelta / 1000 * this.rateOverTime) + burstCreateCount;\r\n            if (newCount > 0) {\r\n                this._lastCreateTime = now;\r\n            }\r\n            if (!canNew) {\r\n                newCount = 0;\r\n            }\r\n            this.varInit(newCount);\r\n            let worldRotateIM = this._startWorldRIM;\r\n            this.varPre(scaleUpdateSpeed, worldRotateIM);\r\n        }\r\n    };\r\n    /**\r\n     * 初始化\r\n     */\r\n    varInit(newCount) {\r\n        const waitCount = this._waitIdList.length;\r\n        newCount = Math.min(waitCount, newCount);\r\n        const progress = this._particleSystemAge % this.duration / this.duration;\r\n        const tempStartMatrix = MathTool.Matrix4Tool.Identity();\r\n        let parentWorldMatrix = this.getParentWorldMatrix();\r\n        let worldMatrix = this.getWorldMatrix();\r\n        let localMatrix = this.getLocalMatrix();\r\n        worldMatrix.decompose(this._startWorldS, null, this._startWorldP);\r\n        worldMatrix.getRotationMatrixToRef(this._startWorldRM);\r\n        this._startWorldRM.invertToRef(this._startWorldRIM);\r\n        this._formatStartInfo(parentWorldMatrix, localMatrix, tempStartMatrix);\r\n        for (let i = 0; i < newCount; i++) {\r\n            const index = this._waitIdList.pop();\r\n            this._startWorldMatrixList[index].copyFrom(worldMatrix);\r\n            this._startWorldRIMList[index].copyFrom(this._startWorldRIM);\r\n            this._realStartWMList[index].copyFrom(tempStartMatrix);\r\n            this.initNew(index, this._startWorldRIM, progress, this.emissionLoop, this.emissionProgress, i, newCount);\r\n            this._activeTimeList[index] = this._particleSystemAge;\r\n            this._activeIdList.push(index);\r\n            this._activeFlagList[index] = 1;\r\n        }\r\n    }\r\n    initNew(index, worldRotateIM, progress, emissionLoop, emissionProgress, emissionIndex, emissionTotal) {\r\n        if (this.textureSheetInterpolation) {\r\n            this.textureSheetInterpolation.initNew(index);\r\n        }\r\n        const _worldMatrix = this._startWorldMatrixList[index];\r\n        if (this.startLifetimeInterpolation) {\r\n            this._lifeTimeList[index] = this.startLifetimeInterpolation.interpolate(progress);\r\n        }\r\n        let result;\r\n        if (this.startColorInterpolation) {\r\n            result = this.startColorInterpolation.interpolate(progress);\r\n            this._startColorList[index].copyFromFloats(result[0], result[1], result[2], result[3]);\r\n        }\r\n        if (this.gravityInterpolation) {\r\n            result = this.gravityInterpolation.interpolate(progress);\r\n            this._startGravityList[index].copyFromFloats(result[0], result[1], result[2]);\r\n        }\r\n        let startRotation = [0, 0, 0];\r\n        if (this.startRotationInterpolation) {\r\n            startRotation = this.startRotationInterpolation.interpolate(progress);\r\n        }\r\n        this._realtimeRotationList[index][0] = startRotation[0];\r\n        this._realtimeRotationList[index][1] = startRotation[1];\r\n        this._realtimeRotationList[index][2] = startRotation[2];\r\n        const startSize = this._startSizeList[index];\r\n        if (this.startSizeInterpolation) {\r\n            result = this.startSizeInterpolation.interpolate(progress);\r\n            startSize.copyFromFloats(result[0], result[1], result[2]);\r\n        }\r\n        let startSpeed = 0;\r\n        if (this.startSpeedInterpolation) {\r\n            startSpeed = this.startSpeedInterpolation.interpolate(progress);\r\n        }\r\n        const startLocalPosition = this._startLocalPositionList[index];\r\n        ShapeEmitterTool.startPositionFunction(this.emitterShape, _worldMatrix, startLocalPosition, emissionLoop, emissionProgress, emissionIndex, emissionTotal, true);\r\n        const startDirection = this._startDirectionList[index];\r\n        ShapeEmitterTool.startDirectionFunction(this.emitterShape, _worldMatrix, startDirection, startLocalPosition, true);\r\n        startDirection.scaleInPlace(startSpeed);\r\n        if (this.enableVelocityOverLifeTime && this.velocityOverLifetimeInterpolation) {\r\n            if (this.velocityOverLifetimeInterpolation.mode == EInterpolationCurveMode.Constant || this.velocityOverLifetimeInterpolation.mode == EInterpolationCurveMode.TwoConstants) {\r\n                result = this.velocityOverLifetimeInterpolation.interpolate(progress);\r\n                this._tempVector3.copyFromFloats(result[0], result[1], result[2]);\r\n                this._tempVector3.subtractToRef(this._velocityLastList[index], this._tempVector3);\r\n                // velocity 为全局空间\r\n                if (!this.velocityOverLifetimeIsLocal) {\r\n                    // 全局转换为局部\r\n                    MathTool.Vector3Tool.TransformCoordinatesFromFloatsToRef(this._tempVector3.x, this._tempVector3.y, this._tempVector3.z, worldRotateIM, this._tempVector3);\r\n                }\r\n                startDirection.addInPlace(this._tempVector3);\r\n                this._velocityLastList[index].copyFromFloats(result[0], result[1], result[2]);\r\n            }\r\n        }\r\n        if (this.enableLimitVelocityOverLifeTime && this.limitVelocityOverLifetimeInterpolation) {\r\n            this._limitVelocityList[index] = Number.MAX_SAFE_INTEGER;\r\n            if (this.limitVelocityOverLifetimeInterpolation.mode == EInterpolationCurveMode.Constant || this.limitVelocityOverLifetimeInterpolation.mode == EInterpolationCurveMode.TwoConstants) {\r\n                this._limitVelocityList[index] = this.limitVelocityOverLifetimeInterpolation.interpolate(0.0);\r\n            }\r\n        }\r\n        this._realtimeVelocityDirectionList[index].copyFrom(startDirection);\r\n        this._velocityLastList[index].copyFromFloats(0, 0, 0);\r\n        this._realtimeLocalPositionList[index].copyFromFloats(0, 0, 0);\r\n        this._realtimeSizeList[index].copyFrom(startSize);\r\n        this._limitVelocityFlagList[index] = false;\r\n    }\r\n    /**\r\n     * 变量预处理\r\n     * @param index\r\n     */\r\n    varPre(scaleUpdateSpeed, worldRotateIM) {\r\n        // scaleUpdateSpeed = scaleUpdateSpeed * 60 / 100;\r\n        const count = this._activeFlagList.length;\r\n        let result;\r\n        for (let i = 0; i < count; i++) {\r\n            if (this._activeFlagList[i] != 1) {\r\n                continue;\r\n            }\r\n            let index = i;\r\n            if (this.simulationSpace == EMeshParticleSpaceMode.World) {\r\n                worldRotateIM = this._startWorldRIMList[index];\r\n            }\r\n            let startTime = this._activeTimeList[index];\r\n            let age = this._particleSystemAge - startTime;\r\n            this._ageList[index] = age;\r\n            this._ratioList[index] = Math.min(1.0, age / this._lifeTimeList[index]);\r\n            let ratio = this._ratioList[index];\r\n            let ratioRate = Math.min(1.0, age / 1000);\r\n            if (this.textureSheetInterpolation) {\r\n                this.textureSheetInterpolation.interpolate(ratio, this._uvSheetList, index);\r\n            }\r\n            // realtime color - 插值结果乘以初始值\r\n            if (this.enableColorOverLifeTime && this.colorOverLifetimeInterpolation) {\r\n                result = this.colorOverLifetimeInterpolation.interpolate(ratio);\r\n                this._tempVector4.copyFromFloats(result[0], result[1], result[2], result[3]);\r\n                this._tempVector4.multiplyInPlace(this._startColorList[index]);\r\n                this._realtimeColorList[index].copyFrom(this._tempVector4);\r\n            }\r\n            else {\r\n                this._realtimeColorList[index].copyFrom(this._startColorList[index]);\r\n            }\r\n            // realtime size - 插值结果乘以初始值\r\n            if (this.enableSizeOverLifeTime && this.sizeOverLifetimeInterpolation) {\r\n                // 尺寸  - 尺寸值 - 插值结果乘以初始尺寸\r\n                result = this.sizeOverLifetimeInterpolation.interpolate(ratio);\r\n                this._realtimeSizeList[index].copyFromFloats(result[0], result[1], result[2]);\r\n                this._realtimeSizeList[index].multiplyInPlace(this._startSizeList[index]);\r\n            }\r\n            else {\r\n                this._realtimeSizeList[index].copyFrom(this._startSizeList[index]);\r\n            }\r\n            // realtime rotation - 插值结果 计算出帧间隔变化量 累加到 上一帧的实时值\r\n            if (this.enableRotationOverLifeTime && this.rotationOverLifetimeInterpolation) {\r\n                // 旋转 - 旋转速度 - 当前帧变化量累加到实时旋转量\r\n                result = this.rotationOverLifetimeInterpolation.interpolate(ratioRate);\r\n                // this._tempVector3.copyFromFloats(result[0], result[1], result[2]);\r\n                // this._tempVector3.scaleToRef(scaleUpdateSpeed, this._tempVector3);\r\n                // this._realtimeRotationList[index].addInPlace(this._tempVector3);\r\n                this._realtimeRotationList[index][0] += result[0] * scaleUpdateSpeed;\r\n                this._realtimeRotationList[index][1] += result[1] * scaleUpdateSpeed;\r\n                this._realtimeRotationList[index][2] += result[2] * scaleUpdateSpeed;\r\n            }\r\n            let realtimeDirection = this._realtimeVelocityDirectionList[index];\r\n            // overlife velocity - 插值结果为实际瞬时值\r\n            if (this.enableVelocityOverLifeTime && this.velocityOverLifetimeInterpolation) {\r\n                // 速度 - 位移速度向量 - 瞬时值\r\n                if (this.velocityOverLifetimeInterpolation.mode == EInterpolationCurveMode.Constant || this.velocityOverLifetimeInterpolation.mode == EInterpolationCurveMode.TwoConstants) {\r\n                    // result = this.velocityOverLifetimeInterpolation.interpolate(ratio);\r\n                }\r\n                else {\r\n                    result = this.velocityOverLifetimeInterpolation.interpolate(ratio);\r\n                    this._tempVector3.copyFromFloats(result[0], result[1], result[2]);\r\n                    this._tempVector3.subtractToRef(this._velocityLastList[index], this._tempVector3);\r\n                    // velocity 为全局空间\r\n                    if (!this.velocityOverLifetimeIsLocal) {\r\n                        // 全局转换为局部\r\n                        MathTool.Vector3Tool.TransformCoordinatesFromFloatsToRef(this._tempVector3.x, this._tempVector3.y, this._tempVector3.z, worldRotateIM, this._tempVector3);\r\n                    }\r\n                    realtimeDirection.addInPlace(this._tempVector3);\r\n                    this._velocityLastList[index].copyFromFloats(result[0], result[1], result[2]);\r\n                }\r\n            }\r\n            // 计算位置变化量 Δp = v * Δt\r\n            realtimeDirection.scaleToRef(scaleUpdateSpeed, this._deltaPosition);\r\n            // 应用此次偏移结果\r\n            this._realtimeLocalPositionList[index].addInPlace(this._deltaPosition);\r\n            // gravity -> F = g + f -> 重力 + 局部力\r\n            let gravity = this._startGravityList[index];\r\n            // 全局转换为局部\r\n            MathTool.Vector3Tool.TransformCoordinatesFromFloatsToRef(gravity.x, gravity.y, gravity.z, worldRotateIM, this._tempVector3);\r\n            // 增加的速度 -> Δv = F/m * Δt -> m 质量为单位质量1\r\n            this._tempVector3.scaleToRef(scaleUpdateSpeed, this._tempVector3);\r\n            // 更新实时速度 -> v' = v + Δv\r\n            realtimeDirection.addInPlace(this._tempVector3);\r\n            // realtime force - 插值结果为实际瞬时值\r\n            if (this.enableForceOverLifeTime && this.forceOverLifetimeInterpolation) {\r\n                // Force\r\n                result = this.forceOverLifetimeInterpolation.interpolate(ratio);\r\n                this._tempVector3.copyFromFloats(result[0], result[1], result[2]);\r\n                // force 为全局空间\r\n                if (!this.forceSpaceIsLocal) {\r\n                    // 全局转换为局部\r\n                    MathTool.Vector3Tool.TransformCoordinatesFromFloatsToRef(this._tempVector3.x, this._tempVector3.y, this._tempVector3.z, worldRotateIM, this._tempVector3);\r\n                }\r\n                // 增加的速度 -> Δv = F/m * Δt -> m 质量为单位质量1\r\n                this._tempVector3.scaleToRef(scaleUpdateSpeed, this._tempVector3);\r\n                // 更新实时速度 -> v' = v + Δv\r\n                realtimeDirection.addInPlace(this._tempVector3);\r\n            }\r\n            // realtime limit velocity - 插值结果为实际瞬时值\r\n            if (this.enableLimitVelocityOverLifeTime && this.limitVelocityOverLifetimeInterpolation) {\r\n                let limitVelocity = Number.MAX_SAFE_INTEGER;\r\n                if (this.limitVelocityOverLifetimeInterpolation.mode == EInterpolationCurveMode.Constant || this.limitVelocityOverLifetimeInterpolation.mode == EInterpolationCurveMode.TwoConstants) {\r\n                    limitVelocity = this._limitVelocityList[index];\r\n                }\r\n                else {\r\n                    limitVelocity = this.limitVelocityOverLifetimeInterpolation.interpolate(ratio);\r\n                }\r\n                let currLength = realtimeDirection.length();\r\n                if (currLength > limitVelocity) {\r\n                    realtimeDirection.scaleInPlace(1.0 - this.limitVelocityOverLifetimeDampen * (currLength - limitVelocity) / currLength * (0.66));\r\n                    // const len = limitVelocity + (currLength - limitVelocity) * Math.pow(Math.E, -this.limitVelocityOverLifetimeDampen);\r\n                    // realtimeDirection.scaleInPlace(len / currLength);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    _deltaPosition = MathTool.Vector3Tool.Zero();\r\n    /**\r\n     * 渲染结束后回收\r\n     */\r\n    recycle = () => {\r\n        const count = this._activeIdList.length;\r\n        const tempList = [];\r\n        for (let i = count - 1; i >= 0; i--) {\r\n            const index = this._activeIdList[i];\r\n            const age = this._ageList[index];\r\n            const life = this._lifeTimeList[index];\r\n            let overage = life - age;\r\n            this._maxLifetimeOverage = Math.max(this._maxLifetimeOverage, overage);\r\n            if (overage <= 0) {\r\n                // this._activeIdList.splice(i, 1);\r\n                this._activeFlagList[index] = 0;\r\n                this._waitIdList.push(index);\r\n                this._ageList[index] = 0;\r\n                this._lifeTimeList[index] = Number.MAX_VALUE;\r\n                this._realtimeLocalPositionList[index].copyFromFloats(0, 0, 0);\r\n                // this._positionList[index].copyFromFloats(0, 0, 0);\r\n                this._realtimeRotationList[index][0] = 0;\r\n                this._realtimeRotationList[index][1] = 0;\r\n                this._realtimeRotationList[index][2] = 0;\r\n                this._realtimeSizeList[index].copyFromFloats(1, 1, 1);\r\n            }\r\n            else {\r\n                tempList.push(index);\r\n            }\r\n        }\r\n        this._activeIdList.length = 0;\r\n        this._activeIdList = tempList;\r\n    };\r\n    /**\r\n     * 粒子排序 - 在变量计算之后\r\n     * 对 _activeIdList 排序\r\n     */\r\n    activeParticlesSort() {\r\n    }\r\n    _updateIndex = 0;\r\n}\r\n","import { DefaultValue, EInterpolationCurveMode, EInterpolationGradienMode, TInterpolateColor, TInterpolateConstant, TInterpolateCurve, TInterpolateGradient, TInterpolateRandom, TInterpolateTwoColors, TInterpolateTwoConstants, TInterpolateTwoCurves, TInterpolateTwoGradients, TParamColorOverLifetime, TParamForceOverLifetime, TParamGravity, TParamLimitVelocityOverLifetime, TParamRotationOverLifetime, TParamSizeOverLifetime, TParamStartColor, TParamStartLifetime, TParamStartRotation, TParamStartSize, TParamStartSpeed, TParamTextureSheet, TParamVelocityOverLifetime } from \"./iparticle_system_config\";\r\n//#endregion\r\n//#region 曲线关键帧 各属性数据在 数组中的序号描述\r\n/**\r\n * 关键帧 时间信息 的数组序号\r\n */\r\nconst KeyIndexFrame = 0;\r\n/**\r\n * 关键帧 值信息 的数组序号\r\n */\r\nconst KeyIndexValue = 1;\r\n/**\r\n * 关键帧 InTangent 的数组序号\r\n */\r\nconst KeyIndexInTangent = 2;\r\n/**\r\n * 关键帧 OutTangent 的数组序号\r\n */\r\nconst KeyIndexOutTangent = 3;\r\n/**\r\n * 关键帧 曲线模式 的数组序号\r\n */\r\nconst KeyIndexMode = 4;\r\n//#endregion\r\n/**\r\n * Enum for the animation key frame interpolation type\r\n */\r\nexport var AnimationKeyInterpolation;\r\n(function (AnimationKeyInterpolation) {\r\n    /**\r\n     * Do not interpolate between keys and use the start key value only. Tangents are ignored\r\n     */\r\n    AnimationKeyInterpolation[AnimationKeyInterpolation[\"STEP\"] = 1] = \"STEP\";\r\n})(AnimationKeyInterpolation || (AnimationKeyInterpolation = {}));\r\n//#region 曲线信息描述\r\n/**\r\n * 曲线 关键帧信息数组 在曲线信息 数据中的序号\r\n */\r\nconst CurveIndexKeys = 0;\r\n/**\r\n * 曲线 值域缩放数据 在曲线信息 数据中的序号\r\n */\r\nconst CurveIndexScalar = 1;\r\n//#endregion\r\n//#region 随机处理\r\n/**\r\n * 一维数据间的随机\r\n * @param min\r\n * @param max\r\n * @param random 随机因子\r\n * @returns\r\n */\r\nexport function RandomRange(min, max, random) {\r\n    if (min === max) {\r\n        return min;\r\n    }\r\n    return ((random * (max - min)) + min);\r\n}\r\n/**\r\n * 二维数据间的随机\r\n * @param min\r\n * @param max\r\n * @param result\r\n * @param random0 第一随机因子\r\n * @param random1 第二随机因子\r\n */\r\nexport function RandomRange2(min, max, result, random0, random1) {\r\n    result[0] = RandomRange(min[0], max[0], random0),\r\n        result[1] = RandomRange(min[1], max[1], random1);\r\n}\r\n/**\r\n * 三维数据间的随机\r\n * @param min\r\n * @param max\r\n * @param result\r\n * @param random0 第一随机因子\r\n * @param random1 第二随机因子\r\n * @param random2 第三随机因子\r\n */\r\nexport function RandomRange3(min, max, result, random0, random1, random2) {\r\n    result[0] = RandomRange(min[0], max[0], random0),\r\n        result[1] = RandomRange(min[1], max[1], random1),\r\n        result[2] = RandomRange(min[2], max[2], random2);\r\n}\r\n/**\r\n * 四维数据间的随机\r\n * @param min\r\n * @param max\r\n * @param result\r\n * @param random0 第一随机因子\r\n * @param random1 第二随机因子\r\n * @param random2 第三随机因子\r\n * @param random3 第四随机因子\r\n */\r\nexport function RandomRange4(min, max, result, random0, random1, random2, random3) {\r\n    result[0] = RandomRange(min[0], max[0], random0),\r\n        result[1] = RandomRange(min[1], max[1], random1),\r\n        result[2] = RandomRange(min[2], max[2], random2),\r\n        result[3] = RandomRange(min[3], max[3], random3);\r\n}\r\nfunction random() {\r\n    return Math.random();\r\n}\r\n//#endregion\r\n//#region 插值方法\r\n/**\r\n * Hermite 插值\r\n * @param value1 第一控制点值\r\n * @param tangent1 第一控制点 切线斜率\r\n * @param value2 第二控制点值\r\n * @param tangent2 第二控制点 切线斜率\r\n * @param amount 插值因子\r\n * @returns\r\n */\r\nexport function Hermite(value1, tangent1, value2, tangent2, amount) {\r\n    var squared = amount * amount;\r\n    var cubed = amount * squared;\r\n    var part1 = ((2.0 * cubed) - (3.0 * squared)) + 1.0;\r\n    var part2 = (-2.0 * cubed) + (3.0 * squared);\r\n    var part3 = (cubed - (2.0 * squared)) + amount;\r\n    var part4 = cubed - squared;\r\n    return (((value1 * part1) + (value2 * part2)) + (tangent1 * part3)) + (tangent2 * part4);\r\n}\r\n/**\r\n * 曲线插值\r\n * @param amount 插值因子\r\n * @param curve 曲线描述\r\n * @returns\r\n */\r\nexport function InterpolationCurve(amount, curve) {\r\n    let keyCount = curve[CurveIndexKeys].length;\r\n    if (keyCount == 0) {\r\n        return curve[CurveIndexScalar];\r\n    }\r\n    let preIndex = 0;\r\n    let nextIndex = keyCount - 1;\r\n    let pre = curve[CurveIndexKeys][preIndex];\r\n    let next = curve[CurveIndexKeys][nextIndex];\r\n    if (keyCount == 1) {\r\n        return pre[KeyIndexValue] * curve[CurveIndexScalar];\r\n    }\r\n    for (let i = 0; i < keyCount - 1; i++) {\r\n        preIndex = i;\r\n        nextIndex = i + 1;\r\n        pre = curve[CurveIndexKeys][preIndex];\r\n        next = curve[CurveIndexKeys][nextIndex];\r\n        if (preIndex == 0 && amount <= pre[KeyIndexFrame]) {\r\n            nextIndex = preIndex;\r\n            next = pre;\r\n            break;\r\n        }\r\n        if (pre[KeyIndexFrame] < amount && amount < next[KeyIndexFrame]) {\r\n            break;\r\n        }\r\n        if (nextIndex == keyCount - 1 && next[KeyIndexFrame] <= amount) {\r\n            preIndex = nextIndex;\r\n            pre = next;\r\n            break;\r\n        }\r\n    }\r\n    if (preIndex == nextIndex) {\r\n        return pre[KeyIndexValue] * curve[CurveIndexScalar];\r\n    }\r\n    amount = (amount - pre[KeyIndexFrame]) / (next[KeyIndexFrame] - pre[KeyIndexFrame]);\r\n    return Hermite(pre[KeyIndexValue], pre[KeyIndexOutTangent], next[KeyIndexValue], next[KeyIndexInTangent], amount) * (curve[CurveIndexScalar]);\r\n}\r\n/**\r\n * 渐变插值\r\n * @param amount 插值因子\r\n * @param gradient 渐变控制点数组\r\n * @returns\r\n */\r\nexport function InterpolationGradient(amount, gradient) {\r\n    let keyCount = gradient.length;\r\n    if (keyCount == 0) {\r\n        return 1;\r\n    }\r\n    let preIndex = 0;\r\n    let nextIndex = keyCount - 1;\r\n    let pre = gradient[preIndex];\r\n    let next = gradient[nextIndex];\r\n    if (keyCount == 1) {\r\n        return pre[GradientIndexValue];\r\n    }\r\n    for (let i = 0; i < keyCount - 1; i++) {\r\n        preIndex = i;\r\n        nextIndex = i + 1;\r\n        pre = gradient[preIndex];\r\n        next = gradient[nextIndex];\r\n        if (preIndex == 0 && amount <= pre[GradientIndexFrame]) {\r\n            nextIndex = preIndex;\r\n            next = pre;\r\n            break;\r\n        }\r\n        if (pre[GradientIndexFrame] < amount && amount < next[GradientIndexFrame]) {\r\n            break;\r\n        }\r\n        if (nextIndex == keyCount - 1 && next[GradientIndexFrame] <= amount) {\r\n            preIndex = nextIndex;\r\n            pre = next;\r\n            break;\r\n        }\r\n    }\r\n    if (preIndex == nextIndex) {\r\n        return pre[GradientIndexValue];\r\n    }\r\n    amount = (amount - pre[GradientIndexFrame]) / (next[GradientIndexFrame] - pre[GradientIndexFrame]);\r\n    return pre[GradientIndexValue] + (next[GradientIndexValue] - pre[GradientIndexValue]) * amount;\r\n}\r\n//#endregion\r\n//#region 可插值数据类型的公共临时实例 - 用于计算过程中作为临时变量复用\r\nconst TempResult1 = 0;\r\nconst TempResult2 = [0, 0];\r\nconst TempResult3 = [0, 0, 0];\r\nconst TempResult4 = [0, 0, 0, 0];\r\nconst TempResult1B = 0;\r\nconst TempResult2B = [0, 0];\r\nconst TempResult3B = [0, 0, 0];\r\nconst TempResult4B = [0, 0, 0, 0];\r\n//#endregion\r\n//#region 曲线插值实现 - 一维 - 三维 - 四维\r\n/**\r\n * 一维曲线插值\r\n */\r\nexport class FloatInterpolation {\r\n    mode = EInterpolationCurveMode.Constant;\r\n    constant0;\r\n    constant1;\r\n    minCurve;\r\n    maxCurve;\r\n    interpolate(amount) {\r\n        switch (this.mode) {\r\n            case (EInterpolationCurveMode.TwoConstants):\r\n                {\r\n                    return RandomRange(this.constant0 || 0, this.constant1 || 0, random());\r\n                }\r\n            case (EInterpolationCurveMode.Curve): {\r\n                const curve = this.minCurve || this.maxCurve;\r\n                return InterpolationCurve(amount, curve);\r\n            }\r\n            case (EInterpolationCurveMode.TwoCurves): {\r\n                const min = InterpolationCurve(amount, this.minCurve);\r\n                const max = InterpolationCurve(amount, this.maxCurve);\r\n                return RandomRange(min, max, random());\r\n            }\r\n            default: {\r\n                return this.constant0 || this.constant1 || 0;\r\n            }\r\n        }\r\n    }\r\n    dispose() {\r\n        this.constant0 = undefined;\r\n        this.constant1 = undefined;\r\n        this.minCurve = undefined;\r\n        this.maxCurve = undefined;\r\n    }\r\n}\r\n/**\r\n * 三维曲线插值\r\n */\r\nexport class Float3Interpolation {\r\n    mode = EInterpolationCurveMode.Constant;\r\n    constant0;\r\n    constant1;\r\n    minCurves;\r\n    maxCurves;\r\n    interpolate(amount) {\r\n        switch (this.mode) {\r\n            case (EInterpolationCurveMode.TwoConstants):\r\n                {\r\n                    RandomRange3(this.constant0, this.constant1, TempResult3, random(), random(), random());\r\n                    return TempResult3;\r\n                }\r\n            case (EInterpolationCurveMode.Curve): {\r\n                const curve0 = this.minCurves[0] || this.maxCurves[0];\r\n                const curve1 = this.minCurves[1] || this.maxCurves[1];\r\n                const curve2 = this.minCurves[2] || this.maxCurves[2];\r\n                TempResult3[0] = InterpolationCurve(amount, curve0);\r\n                TempResult3[1] = InterpolationCurve(amount, curve1);\r\n                TempResult3[2] = InterpolationCurve(amount, curve2);\r\n                return TempResult3;\r\n            }\r\n            case (EInterpolationCurveMode.TwoCurves): {\r\n                const minCurve0 = this.minCurves[0];\r\n                const minCurve1 = this.minCurves[1];\r\n                const minCurve2 = this.minCurves[2];\r\n                const maxCurve0 = this.maxCurves[0];\r\n                const maxCurve1 = this.maxCurves[1];\r\n                const maxCurve2 = this.maxCurves[2];\r\n                TempResult3[0] = InterpolationCurve(amount, minCurve0);\r\n                TempResult3[1] = InterpolationCurve(amount, minCurve1);\r\n                TempResult3[2] = InterpolationCurve(amount, minCurve2);\r\n                TempResult3B[0] = InterpolationCurve(amount, maxCurve0);\r\n                TempResult3B[1] = InterpolationCurve(amount, maxCurve1);\r\n                TempResult3B[2] = InterpolationCurve(amount, maxCurve2);\r\n                RandomRange3(TempResult3, TempResult3B, TempResult3, random(), random(), random());\r\n                return TempResult3;\r\n            }\r\n            default: {\r\n                return this.constant0 || this.constant1;\r\n            }\r\n        }\r\n    }\r\n    dispose() {\r\n        this.constant0 = undefined;\r\n        this.constant1 = undefined;\r\n        this.minCurves = undefined;\r\n        this.maxCurves = undefined;\r\n    }\r\n}\r\n/**\r\n * 四维曲线插值\r\n */\r\nexport class Float4Interpolation {\r\n    mode = EInterpolationCurveMode.Constant;\r\n    constant0;\r\n    constant1;\r\n    minCurves;\r\n    maxCurves;\r\n    interpolate(amount) {\r\n        switch (this.mode) {\r\n            case (EInterpolationCurveMode.TwoConstants):\r\n                {\r\n                    RandomRange4(this.constant0, this.constant1, TempResult4, random(), random(), random(), random());\r\n                    return TempResult4;\r\n                }\r\n            case (EInterpolationCurveMode.Curve): {\r\n                const curve0 = this.minCurves[0] || this.maxCurves[0];\r\n                const curve1 = this.minCurves[1] || this.maxCurves[1];\r\n                const curve2 = this.minCurves[2] || this.maxCurves[2];\r\n                const curve3 = this.minCurves[3] || this.maxCurves[3];\r\n                TempResult4[0] = InterpolationCurve(amount, curve0);\r\n                TempResult4[1] = InterpolationCurve(amount, curve1);\r\n                TempResult4[2] = InterpolationCurve(amount, curve2);\r\n                TempResult4[3] = InterpolationCurve(amount, curve3);\r\n                return TempResult4;\r\n            }\r\n            case (EInterpolationCurveMode.TwoCurves): {\r\n                const minCurve0 = this.minCurves[0];\r\n                const minCurve1 = this.minCurves[1];\r\n                const minCurve2 = this.minCurves[2];\r\n                const minCurve3 = this.minCurves[3];\r\n                const maxCurve0 = this.maxCurves[0];\r\n                const maxCurve1 = this.maxCurves[1];\r\n                const maxCurve2 = this.maxCurves[2];\r\n                const maxCurve3 = this.maxCurves[3];\r\n                TempResult4[0] = InterpolationCurve(amount, minCurve0);\r\n                TempResult4[1] = InterpolationCurve(amount, minCurve1);\r\n                TempResult4[2] = InterpolationCurve(amount, minCurve2);\r\n                TempResult4[3] = InterpolationCurve(amount, minCurve3);\r\n                TempResult4B[0] = InterpolationCurve(amount, maxCurve0);\r\n                TempResult4B[1] = InterpolationCurve(amount, maxCurve1);\r\n                TempResult4B[2] = InterpolationCurve(amount, maxCurve2);\r\n                TempResult4B[3] = InterpolationCurve(amount, maxCurve3);\r\n                RandomRange4(TempResult4, TempResult4B, TempResult4, random(), random(), random(), random());\r\n                return TempResult4;\r\n            }\r\n            default: {\r\n                return this.constant0 || this.constant1;\r\n            }\r\n        }\r\n    }\r\n    dispose() {\r\n        this.constant0 = undefined;\r\n        this.constant1 = undefined;\r\n        this.minCurves = undefined;\r\n        this.maxCurves = undefined;\r\n    }\r\n}\r\n//#endregion\r\n//#region 从 json 描述创建曲线插值模块\r\nexport const ZeroInterpolateConstant = 0;\r\nexport const ZeroInterpolateCurve = [[], 1];\r\nexport const OneInterpolateConstant = 1;\r\nexport const OneInterpolateCurve = [[], 0];\r\n/**\r\n * 一维 - 根据目标数据使用场景 创建对应 默认插值模块\r\n * @param ptype 使用场景标识\r\n * @returns\r\n */\r\nfunction defaultFloatInterpolation(ptype) {\r\n    let interpolate = undefined;\r\n    switch (ptype) {\r\n        case TParamStartSpeed: {\r\n            interpolate = new FloatInterpolation();\r\n            interpolate.mode = EInterpolationCurveMode.Constant;\r\n            interpolate.constant0 = DefaultValue.startSpeed;\r\n            break;\r\n        }\r\n        case TParamStartLifetime: {\r\n            interpolate = new FloatInterpolation();\r\n            interpolate.mode = EInterpolationCurveMode.Constant;\r\n            interpolate.constant0 = DefaultValue.startLifetime;\r\n            break;\r\n        }\r\n        case TParamTextureSheet: {\r\n            interpolate = new FloatInterpolation();\r\n            interpolate.mode = EInterpolationCurveMode.Constant;\r\n            interpolate.constant0 = DefaultValue.textureSheetFrame;\r\n            break;\r\n        }\r\n    }\r\n    return interpolate;\r\n}\r\n/**\r\n * 一维 - 从 json 描述创建曲线插值模块\r\n * @param interpolation 目标插值模块 - 如果外部传入则逻辑为应用json配置到该模块\r\n * @param config json 描述\r\n * @param ptype 数据应用场景描述\r\n * @param scale 数据值域缩放 - 如角度转弧度，秒转毫秒，重力因子转重力值\r\n * @returns\r\n */\r\nexport function parseFloatInterpolation(interpolation, config, ptype, scale = 1) {\r\n    if (config) {\r\n        if (!interpolation) {\r\n            interpolation = new FloatInterpolation();\r\n        }\r\n        switch (config[1]) {\r\n            case TInterpolateConstant: {\r\n                interpolation.mode = EInterpolationCurveMode.Constant;\r\n                interpolation.constant0 = config[2] * scale;\r\n                break;\r\n            }\r\n            case TInterpolateTwoConstants: {\r\n                interpolation.mode = EInterpolationCurveMode.TwoConstants;\r\n                interpolation.constant0 = config[2] * scale;\r\n                interpolation.constant1 = config[3] * scale;\r\n                break;\r\n            }\r\n            case TInterpolateCurve: {\r\n                interpolation.mode = EInterpolationCurveMode.Curve;\r\n                interpolation.minCurve = scaleCurve(config[2], scale);\r\n                break;\r\n            }\r\n            case TInterpolateTwoCurves: {\r\n                interpolation.mode = EInterpolationCurveMode.Curve;\r\n                interpolation.minCurve = scaleCurve(config[2], scale);\r\n                interpolation.maxCurve = scaleCurve(config[3], scale);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        interpolation = defaultFloatInterpolation(ptype);\r\n    }\r\n    return interpolation;\r\n}\r\nfunction scaleCurve(curve, scale) {\r\n    curve[1] *= scale;\r\n    return curve;\r\n}\r\nfunction extendThreeParamConstant(constant, ptype) {\r\n    switch (ptype) {\r\n        case TParamGravity: {\r\n            return [0, constant, 0];\r\n        }\r\n        case TParamRotationOverLifetime:\r\n        case TParamStartRotation: {\r\n            return [0, 0, constant];\r\n        }\r\n        default:\r\n            return [constant, constant, constant];\r\n    }\r\n}\r\nfunction extendThreeParamCurve(curve, ptype) {\r\n    switch (ptype) {\r\n        case TParamGravity: {\r\n            return [ZeroInterpolateCurve, curve, ZeroInterpolateCurve];\r\n        }\r\n        case TParamRotationOverLifetime:\r\n        case TParamStartRotation: {\r\n            return [ZeroInterpolateCurve, ZeroInterpolateCurve, curve];\r\n        }\r\n        default:\r\n            return [curve, curve, curve];\r\n    }\r\n}\r\n/**\r\n * 三维 - 一维 json 描述 转换为 三维 json 描述\r\n * @example 默认 Y 旋转转换 XYZ 旋转\r\n * @param one 一维 json 描述\r\n * @param ptype 数据应用场景描述\r\n * @param scale 数据值域缩放 - 如角度转弧度，秒转毫秒，重力因子转重力值\r\n * @returns\r\n */\r\nexport function formatThreeParam(one, ptype, scale) {\r\n    let three = one;\r\n    if (one[0] == 1) {\r\n        switch (one[1]) {\r\n            case TInterpolateConstant: {\r\n                three = [\r\n                    3,\r\n                    TInterpolateConstant,\r\n                    extendThreeParamConstant(one[2] * scale, ptype)\r\n                ];\r\n                break;\r\n            }\r\n            case TInterpolateTwoConstants: {\r\n                three = [\r\n                    3,\r\n                    TInterpolateTwoConstants,\r\n                    extendThreeParamConstant(one[2] * scale, ptype),\r\n                    extendThreeParamConstant(one[3] * scale, ptype)\r\n                ];\r\n                break;\r\n            }\r\n            case TInterpolateCurve: {\r\n                three = [\r\n                    3,\r\n                    TInterpolateCurve,\r\n                    extendThreeParamCurve(scaleCurve(one[2], scale), ptype)\r\n                ];\r\n                break;\r\n            }\r\n            case TInterpolateTwoCurves: {\r\n                three = [\r\n                    3,\r\n                    TInterpolateTwoCurves,\r\n                    extendThreeParamCurve(scaleCurve(one[2], scale), ptype),\r\n                    extendThreeParamCurve(scaleCurve(one[3], scale), ptype)\r\n                ];\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return three;\r\n}\r\n/**\r\n * 三维 - 根据目标数据使用场景 创建对应 默认插值模块\r\n * @param ptype 使用场景标识\r\n * @returns\r\n */\r\nfunction defaultFloat3Interpolation(ptype) {\r\n    let interpolate = undefined;\r\n    switch (ptype) {\r\n        case TParamStartSize: {\r\n            interpolate = new Float3Interpolation();\r\n            interpolate.mode = EInterpolationCurveMode.Constant;\r\n            interpolate.constant0 = DefaultValue.startSize;\r\n            break;\r\n        }\r\n        case TParamStartRotation: {\r\n            interpolate = new Float3Interpolation();\r\n            interpolate.mode = EInterpolationCurveMode.Constant;\r\n            interpolate.constant0 = DefaultValue.startRotation;\r\n            break;\r\n        }\r\n        case TParamGravity: {\r\n            interpolate = new Float3Interpolation();\r\n            interpolate.mode = EInterpolationCurveMode.Constant;\r\n            interpolate.constant0 = DefaultValue.gravity;\r\n            break;\r\n        }\r\n        case TParamVelocityOverLifetime: {\r\n            // interpolate = new Float3Interpolation();\r\n            // interpolate.mode = EInterpolationMode.Constant;\r\n            // interpolate.constant0 = DefaultValue.velocityOverLifetime;\r\n            break;\r\n        }\r\n        case TParamLimitVelocityOverLifetime: {\r\n            // interpolate = new Float3Interpolation();\r\n            // interpolate.mode = EInterpolationMode.Constant;\r\n            // interpolate.constant0 = DefaultValue.limitVelocityOverLifetime;\r\n            break;\r\n        }\r\n        case TParamForceOverLifetime: {\r\n            // interpolate = new Float3Interpolation();\r\n            // interpolate.mode = EInterpolationMode.Constant;\r\n            // interpolate.constant0 = DefaultValue.forceOverLifetime;\r\n            break;\r\n        }\r\n        case TParamSizeOverLifetime: {\r\n            // interpolate = new Float3Interpolation();\r\n            // interpolate.mode = EInterpolationMode.Constant;\r\n            // interpolate.constant0 = DefaultValue.sizeOverLifetime;\r\n            break;\r\n        }\r\n        case TParamRotationOverLifetime: {\r\n            // interpolate = new Float3Interpolation();\r\n            // interpolate.mode = EInterpolationMode.Constant;\r\n            // interpolate.constant0 = DefaultValue.rotationOverLifetime;\r\n            break;\r\n        }\r\n    }\r\n    return interpolate;\r\n}\r\n/**\r\n * 三维 - 从 json 描述创建曲线插值模块\r\n * @param interpolation 目标插值模块 - 如果外部传入则逻辑为应用json配置到该模块\r\n * @param config json 描述\r\n * @param ptype 数据应用场景描述\r\n * @param scale 数据值域缩放 - 如角度转弧度，秒转毫秒，重力因子转重力值\r\n * @returns\r\n */\r\nexport function parseFloat3Interpolation(interpolation, config, ptype, scale = 1) {\r\n    if (config) {\r\n        if (!interpolation) {\r\n            interpolation = new Float3Interpolation();\r\n        }\r\n        config = formatThreeParam(config, ptype, scale);\r\n        switch (config[1]) {\r\n            case TInterpolateConstant: {\r\n                interpolation.mode = EInterpolationCurveMode.Constant;\r\n                interpolation.constant0 = config[2];\r\n                interpolation.constant1 = config[2];\r\n                break;\r\n            }\r\n            case TInterpolateTwoConstants: {\r\n                interpolation.mode = EInterpolationCurveMode.TwoConstants;\r\n                interpolation.constant0 = config[2];\r\n                interpolation.constant1 = config[3];\r\n                break;\r\n            }\r\n            case TInterpolateCurve: {\r\n                interpolation.mode = EInterpolationCurveMode.Curve;\r\n                interpolation.minCurves = config[2];\r\n                interpolation.maxCurves = config[2];\r\n                break;\r\n            }\r\n            case TInterpolateTwoCurves: {\r\n                interpolation.mode = EInterpolationCurveMode.Curve;\r\n                interpolation.minCurves = config[2];\r\n                interpolation.maxCurves = config[3];\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        interpolation = defaultFloat3Interpolation(ptype);\r\n    }\r\n    return interpolation;\r\n}\r\n/**\r\n * 四维 - 根据目标数据使用场景 创建对应 默认插值模块\r\n * @param ptype 使用场景标识\r\n * @returns\r\n */\r\nfunction defaultFloat4Interpolation(ptype) {\r\n    let interpolate;\r\n    switch (ptype) {\r\n        case TParamStartColor: {\r\n            interpolate = new Float4Interpolation();\r\n            interpolate.mode = EInterpolationCurveMode.Constant;\r\n            interpolate.constant0 = DefaultValue.startColor;\r\n            break;\r\n        }\r\n        case TParamColorOverLifetime: {\r\n            // interpolate = new Float4Interpolation();\r\n            // interpolate.mode = EInterpolationMode.Constant;\r\n            // interpolate.constant0 = DefaultValue.colorOverLifetime;\r\n            break;\r\n        }\r\n    }\r\n    return interpolate;\r\n}\r\n/**\r\n * 四维 - 从 json 描述创建曲线插值模块\r\n * @param interpolation 目标插值模块 - 如果外部传入则逻辑为应用json配置到该模块\r\n * @param config json 描述\r\n * @param ptype 数据应用场景描述\r\n * @param scale 数据值域缩放 - 如角度转弧度，秒转毫秒，重力因子转重力值\r\n * @returns\r\n */\r\nexport function parseFloat4Interpolation(interpolation, config, ptype) {\r\n    if (config) {\r\n        if (!interpolation) {\r\n            interpolation = new Float4Interpolation();\r\n        }\r\n        switch (config[1]) {\r\n            case TInterpolateConstant: {\r\n                interpolation.mode = EInterpolationCurveMode.Constant;\r\n                interpolation.constant0 = config[2];\r\n                interpolation.constant1 = config[2];\r\n                break;\r\n            }\r\n            case TInterpolateTwoConstants: {\r\n                interpolation.mode = EInterpolationCurveMode.TwoConstants;\r\n                interpolation.constant0 = config[2];\r\n                interpolation.constant1 = config[3];\r\n                break;\r\n            }\r\n            case TInterpolateCurve: {\r\n                interpolation.mode = EInterpolationCurveMode.Curve;\r\n                interpolation.minCurves = config[2];\r\n                interpolation.maxCurves = config[2];\r\n                break;\r\n            }\r\n            case TInterpolateTwoCurves: {\r\n                interpolation.mode = EInterpolationCurveMode.Curve;\r\n                interpolation.minCurves = config[2];\r\n                interpolation.maxCurves = config[3];\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        interpolation = defaultFloat4Interpolation(ptype);\r\n    }\r\n    return interpolation;\r\n}\r\n/**\r\n * 渐变控制点 时间 数据在渐变信息中的序号\r\n */\r\nconst GradientIndexFrame = 0;\r\n/**\r\n * 渐变控制点 值 数据在渐变信息中的序号\r\n */\r\nconst GradientIndexValue = 1;\r\n//#endregion\r\n//#region 渐变插值\r\nexport class Color4Gradient {\r\n    mode = EInterpolationGradienMode.Random;\r\n    constant0;\r\n    constant1;\r\n    minGradients;\r\n    maxGradients;\r\n    interpolate(amount) {\r\n        switch (this.mode) {\r\n            case (EInterpolationGradienMode.Color): {\r\n                return this.constant0 || this.constant1;\r\n            }\r\n            case (EInterpolationGradienMode.TwoColors):\r\n                {\r\n                    RandomRange4(this.constant0 || this.constant1, this.constant1 || this.constant0, TempResult4, random(), random(), random(), random());\r\n                    return TempResult4;\r\n                }\r\n            case (EInterpolationGradienMode.Gradient): {\r\n                const gradient0 = this.minGradients[0] || this.maxGradients[0];\r\n                const gradient1 = this.minGradients[1] || this.maxGradients[1];\r\n                const gradient2 = this.minGradients[2] || this.maxGradients[2];\r\n                const gradient3 = this.minGradients[3] || this.maxGradients[3];\r\n                TempResult4[0] = InterpolationGradient(amount, gradient0);\r\n                TempResult4[1] = InterpolationGradient(amount, gradient1);\r\n                TempResult4[2] = InterpolationGradient(amount, gradient2);\r\n                TempResult4[3] = InterpolationGradient(amount, gradient3);\r\n                return TempResult4;\r\n            }\r\n            case (EInterpolationGradienMode.TwoGradients): {\r\n                const minGradient0 = this.minGradients[0];\r\n                const minGradient1 = this.minGradients[1];\r\n                const minGradient2 = this.minGradients[2];\r\n                const minGradient3 = this.minGradients[3];\r\n                const maxGradient0 = this.maxGradients[0];\r\n                const maxGradient1 = this.maxGradients[1];\r\n                const maxGradient2 = this.maxGradients[2];\r\n                const maxGradient3 = this.maxGradients[3];\r\n                TempResult4[0] = InterpolationGradient(amount, minGradient0);\r\n                TempResult4[1] = InterpolationGradient(amount, minGradient1);\r\n                TempResult4[2] = InterpolationGradient(amount, minGradient2);\r\n                TempResult4[3] = InterpolationGradient(amount, minGradient3);\r\n                TempResult4B[0] = InterpolationGradient(amount, maxGradient0);\r\n                TempResult4B[1] = InterpolationGradient(amount, maxGradient1);\r\n                TempResult4B[2] = InterpolationGradient(amount, maxGradient2);\r\n                TempResult4B[3] = InterpolationGradient(amount, maxGradient3);\r\n                RandomRange4(TempResult4, TempResult4B, TempResult4, random(), random(), random(), random());\r\n                return TempResult4;\r\n            }\r\n            default: {\r\n                TempResult4[0] = random();\r\n                TempResult4[1] = random();\r\n                TempResult4[2] = random();\r\n                TempResult4[3] = random();\r\n                return TempResult4;\r\n            }\r\n        }\r\n    }\r\n    dispose() {\r\n        this.constant0 = undefined;\r\n        this.constant1 = undefined;\r\n        // (<IGradient4>this.minGradients) = undefined;\r\n        // (<IGradient4>this.maxGradients) = undefined;\r\n    }\r\n}\r\n/**\r\n * 根据json表达创建渐变插值模块\r\n * @param interpolation\r\n * @param config\r\n * @param ptype\r\n * @returns\r\n */\r\nexport function parseColor4Gradient(interpolation, config, ptype) {\r\n    if (config) {\r\n        if (!interpolation) {\r\n            interpolation = new Color4Gradient();\r\n        }\r\n        switch (config[1]) {\r\n            case TInterpolateRandom: {\r\n                interpolation.mode = EInterpolationGradienMode.Random;\r\n                break;\r\n            }\r\n            case TInterpolateColor: {\r\n                interpolation.mode = EInterpolationGradienMode.Color;\r\n                interpolation.constant0 = config[2];\r\n                interpolation.constant1 = config[2];\r\n                break;\r\n            }\r\n            case TInterpolateTwoColors: {\r\n                interpolation.mode = EInterpolationGradienMode.TwoColors;\r\n                interpolation.constant0 = config[2];\r\n                interpolation.constant1 = config[3];\r\n                break;\r\n            }\r\n            case TInterpolateGradient: {\r\n                interpolation.mode = EInterpolationGradienMode.Gradient;\r\n                interpolation.minGradients = config[2];\r\n                interpolation.maxGradients = config[2];\r\n                break;\r\n            }\r\n            case TInterpolateTwoGradients: {\r\n                interpolation.mode = EInterpolationGradienMode.TwoGradients;\r\n                interpolation.minGradients = config[2];\r\n                interpolation.maxGradients = config[3];\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        // interpolation = defaultFloat4Interpolation(ptype);\r\n    }\r\n    return interpolation;\r\n}\r\n//#endregion\r\n","export var RowMode;\r\n(function (RowMode) {\r\n    RowMode[RowMode[\"Custom\"] = 0] = \"Custom\";\r\n    RowMode[RowMode[\"Random\"] = 1] = \"Random\";\r\n})(RowMode || (RowMode = {}));\r\nexport var TimeMode;\r\n(function (TimeMode) {\r\n    TimeMode[TimeMode[\"Liftime\"] = 0] = \"Liftime\";\r\n    TimeMode[TimeMode[\"Speed\"] = 1] = \"Speed\";\r\n})(TimeMode || (TimeMode = {}));\r\nexport var AnimationMode;\r\n(function (AnimationMode) {\r\n    AnimationMode[AnimationMode[\"WholeSheet\"] = 0] = \"WholeSheet\";\r\n    AnimationMode[AnimationMode[\"SingleRow\"] = 1] = \"SingleRow\";\r\n})(AnimationMode || (AnimationMode = {}));\r\nexport const ATTRIBUTE_PS_UV_SHEET = 'uv_sheet';\r\nexport class TextureSheet {\r\n    rowList = [];\r\n    startFrameList = [];\r\n    rowMode = RowMode.Random;\r\n    customRow = 0;\r\n    timeMode = TimeMode.Liftime;\r\n    animMode = AnimationMode.WholeSheet;\r\n    _tilesX = 1;\r\n    _tilesY = 1;\r\n    // private _tilesXY: number = 1;\r\n    _uScale = 1;\r\n    _vScale = 1;\r\n    set tilesX(v) {\r\n        this._tilesX = v;\r\n        this._uScale = 1 / v;\r\n        // this._tilesXY = this._tilesX * this._tilesY;\r\n    }\r\n    set tilesY(v) {\r\n        this._tilesY = v;\r\n        this._vScale = 1 / v;\r\n        // this._tilesXY = this._tilesX * this._tilesY;\r\n    }\r\n    frameOverTime;\r\n    startFrame;\r\n    cycles = 1;\r\n    active = true;\r\n    initNew(index) {\r\n        this.startFrameList[index] = this.startFrame.interpolate(0);\r\n        this.rowList[index] = Math.round(Math.random() * this._tilesY) % this._tilesY;\r\n    }\r\n    interpolate(amount, data, index) {\r\n        if (this.active && this.frameOverTime) {\r\n            const interpolation = this.frameOverTime.interpolate((amount * this.cycles) % 1);\r\n            let start = this.startFrameList[index];\r\n            let cellId = 0;\r\n            let cellX = 0;\r\n            let cellY = 0;\r\n            if (this.animMode == AnimationMode.SingleRow) {\r\n                if (this.rowMode == RowMode.Custom) {\r\n                    cellY = this.customRow;\r\n                }\r\n                else {\r\n                    cellY = this.rowList[index];\r\n                }\r\n                cellX = Math.floor(((start + interpolation) * this._tilesX) % this._tilesX);\r\n            }\r\n            else {\r\n                cellId = start + interpolation * this._tilesX * this._tilesY;\r\n                cellX = Math.floor(cellId % this._tilesX);\r\n                cellY = Math.floor(cellId / this._tilesX);\r\n            }\r\n            data[index][0] = this._tilesX,\r\n                data[index][1] = this._tilesY,\r\n                data[index][2] = cellX,\r\n                // �������� invetY\r\n                data[index][3] = (this._tilesY - cellY - 1);\r\n        }\r\n        else {\r\n            data[index][0] = this._tilesX,\r\n                data[index][1] = this._tilesY,\r\n                data[index][2] = 0,\r\n                // �������� invetY\r\n                data[index][3] = (this._tilesY - 0 - 1);\r\n        }\r\n    }\r\n}\r\n","import { EMeshParticleSpaceMode, ParticleSystemTool } from \"./compute\";\r\nimport { Box, Circle, Cone, EArcMode, Edge, Hemisphere, Point, Rectangle, Sphere } from \"./emitter\";\r\nimport { Float3Interpolation, Float4Interpolation, FloatInterpolation } from \"./interpolation\";\r\nimport { EInterpolationCurveMode } from \"./iparticle_system_config\";\r\nimport { MathTool } from \"./math\";\r\nimport { TextureSheet } from \"./texture_sheet\";\r\nwindow.BPPS = {\r\n    Box,\r\n    Cone,\r\n    Circle,\r\n    Edge,\r\n    Hemisphere,\r\n    Point,\r\n    Rectangle,\r\n    Sphere,\r\n    ParticleSystemTool,\r\n    MathTool,\r\n    EArcMode,\r\n    EInterpolationCurveMode,\r\n    TextureSheet,\r\n    EMeshParticleSpaceMode,\r\n    FloatInterpolation,\r\n    Float3Interpolation,\r\n    Float4Interpolation\r\n};\r\n"],"names":["MathTool","static","directionToQuaternion","direction","result","xAxis","x","yAxis","y","zAxis","z","yaw","Math","atan2","PI","len","sqrt","pitch","roll","halfRoll","halfPitch","halfYaw","sinRoll","sin","cosRoll","cos","sinPitch","cosPitch","sinYaw","cosYaw","w","RotationYawPitchRollToRef","EShapeEmitterMode","EArcMode","EShapeEmitterDirectionMode","Box","mode","radius","angle","radiusThickness","baseHeight","height","heightRange","arcMode","Random","arcValue","arcSpread","arcSpeed","scale","directionMode","Unity","emitFromSpawnPointOnly","directionRandomizer","config","worldMatrix","resultDirection","localPosition","isLocal","copyFromFloats","Vector3Tool","TransformNormalFromFloatsToRef","resultPosition","emissionLoop","emissionProgress","emissionIndex","emissionTotal","randX","ScalarTool","RandomRange","randY","randZ","sx","sy","sz","TransformCoordinatesFromFloatsToRef","SpreadLimit","computeRadians","emission_loop","emission_progress","emission_index","emission_total","arc_total_value","arc_value","arc_spread","arc_speed","arc_mode","s","round","radians","loop_count","floor","random","Circle","copyFrom","normalize","randRadius","Cone","addInPlaceFromFloats","h","tan","MAX_Z","max","Edge","Hemisphere","range","v","phi","theta","acos","abs","Point","getTranslationToRef","Rectangle","Sphere","ShapeEmitterTool","directionToUpdate","computeDirection","positionToUpdate","startPositionFunction","EMeshParticleSpaceMode","EMeshParticleScaleMode","ERenderAlignment","EInterpolationCurveMode","EInterpolationGradienMode","ParticleSystemTool","TempVector3_0","Zero","TempVector3_1","TempQuaternion_0","QuaternionTool","TempMatrix_1","Matrix4Tool","sqrt3","maxParticles","looping","prewarm","duration","_loopCount","startDelay","emitterShape","emissionTime","rateOverTime","bursts","_burstsLoopCount","simulationSpace","Local","scalingSpace","Hierarchy","renderAlignment","startLifetimeInterpolation","startSpeedInterpolation","startSizeInterpolation","startRotationInterpolation","startColorInterpolation","gravityInterpolation","velocityOverLifetimeInterpolation","velocityOverLifetimeIsLocal","limitVelocityOverLifetimeDampen","limitVelocityOverLifetimeInterpolation","forceOverLifetimeInterpolation","forceSpaceIsLocal","colorOverLifetimeInterpolation","sizeOverLifetimeInterpolation","rotationOverLifetimeInterpolation","textureSheetInterpolation","_ageList","_ratioList","_lifeTimeList","_activeTimeList","_startGravityList","_startLocalPositionList","_startPositionList","_startSizeList","_startColorList","_realtimeLocalPositionList","_realtimeRotationList","_realtimeSizeList","_realtimeColorList","_velocityLastList","_limitVelocityFlagList","_limitVelocityList","_realtimeForceList","_startDirectionList","_realtimeVelocityDirectionList","_activeIdList","_activeFlagList","_waitIdList","_startWorldMatrixList","_startWorldRIMList","_realStartWMList","_uvSheetList","enableForceOverLifeTime","enableVelocityOverLifeTime","enableLimitVelocityOverLifeTime","enableColorOverLifeTime","enableSizeOverLifeTime","enableRotationOverLifeTime","_particleSystemAge","_tempVector3","_tempVector4","Vector4Tool","_lastTime","_deltaTime","_lastCreateTime","_isPlaying","_isComputeable","getParentWorldMatrix","Identity","getWorldMatrix","getLocalMatrix","getCameraPosition","_isDisposed","dispose","this","stop","_mpMatrixList","undefined","_mpColorData","length","mpMatrixList","mpColorData","_maxId","build","Float32Array","i","push","Number","MAX_VALUE","One","start","setTimeout","_startCall","Date","now","varCompute","_stop","index","pop","mpUpdate","_update","_mpTempMatrix","_cameraInvertMatrix","_startWorldRIM","_startWorldP","_startWorldRM","_startWorldS","_startLocalS","_start_parent_m","_start_wm","_start_local_m","_start_p_s","_start_p_r","_start_p_p","_start_l_s","_start_l_r","_start_l_p","_maxLifetimeOverage","maxLifetimeOverage","_formatStartInfo","parentWM","localWM","resultStartMatrix","decompose","View","World","ComposeToRef","multiplyToRef","camraGlobalPos","lookCameraDirection","_start_w_m","clone","tempStartMatrix","realStartMatrix","vec3_zero","activeCount","_startLocalPos","_localPosition","_rotation","_scaling","_color","ii","localrotx","localroty","localrotz","subtractInPlace","setTranslationFromFloats","setTranslation","copyToArray","delta","scaleUpdateSpeed","min","createDelta","tempLoop","canNew","check","localTimeDiff","burstCreateCount","burstsCount","burstTime","burstCount","burstLoop","interval","ceil","newCount","varInit","worldRotateIM","varPre","waitCount","progress","parentWorldMatrix","localMatrix","getRotationMatrixToRef","invertToRef","initNew","_worldMatrix","interpolate","startRotation","startSize","startSpeed","startLocalPosition","startDirection","startDirectionFunction","scaleInPlace","subtractToRef","addInPlace","MAX_SAFE_INTEGER","count","startTime","age","ratio","ratioRate","multiplyInPlace","realtimeDirection","scaleToRef","_deltaPosition","gravity","limitVelocity","currLength","recycle","tempList","overage","activeParticlesSort","_updateIndex","AnimationKeyInterpolation","RandomRange3","random0","random1","random2","RandomRange4","random3","InterpolationCurve","amount","curve","keyCount","preIndex","nextIndex","pre","next","value1","tangent1","value2","tangent2","squared","cubed","Hermite","TempResult3","TempResult4","TempResult3B","TempResult4B","FloatInterpolation","constant0","constant1","minCurve","maxCurve","Float3Interpolation","minCurves","maxCurves","curve0","curve1","curve2","minCurve0","minCurve1","minCurve2","maxCurve0","maxCurve1","maxCurve2","Float4Interpolation","curve3","minCurve3","maxCurve3","RowMode","TimeMode","AnimationMode","window","BPPS","TextureSheet","rowList","startFrameList","rowMode","customRow","timeMode","Liftime","animMode","WholeSheet","_tilesX","_tilesY","_uScale","_vScale","tilesX","tilesY","frameOverTime","startFrame","cycles","active","data","interpolation","cellId","cellX","cellY","SingleRow","Custom"],"sourceRoot":""}